#define SLX2 ON
import <Libraries/TimeBaseSeconds>
import <Libraries/ContinuousSmall>
import <Libraries/PlotTrace>
import <Libraries/ValueTable>
import <Libraries/StateMachine>

import <TemperatureHistory>
import <HeatingConstants>

module RoomHeating {
  //========== Experiment parameters
  public constant double TEMP_NOFREEZE       =  7;      // °C -- frost protection
  public constant double TEMP_DAY_NOMINAL    = 21;      // °C
  public constant double BOILER_WATER_TEMP   = 40;      // °C
  public constant double EXPERIMENT_DURATION = 2*Day;
  //========== End Experiment parameters

  pointer (Environment) env;
  pointer (Room)        room;
  pointer (Resident)    resident;

  passive class Environment implements (Behavior) {
    ContinuousVariable T;
    ValueTable T_table(Hour);
    pointer (Boiler) b;
    
    initial {
      b = new Boiler(BOILER_WATER_TEMP);
      load history data into T_table;
      T.state = T_table.linear(0);

      theIntegrator->attachODE(ME, 1);  
    }
  
    concrete method derivatives(double t) {
      T.state = T_table.linear(time);
    }
  }

  passive class Boiler (double T_init) implements (Behavior) {
    ContinuousVariable T;
    double T_value = T_init; // °C
  
    initial {
      T.state= T_value;
      theIntegrator->attachODE(ME, 0);
    } 
  
    concrete method derivatives(double t) {
      T.state= T_value;
    } 
  } 

  passive class Room() implements (Behavior) {  
    ContinuousVariable T; 
    pointer (Window) w;
    pointer (Radiator) r;
  
    initial {
      w= new Window();
      r= new WaterRadiator(1.0);
//    r= new ElectricalRadiator(0.2);
      T.state = r->tT;
      theIntegrator->attachVar(&T);
      theIntegrator->attachODE(ME, 1);
    }
        
    concrete method derivatives(double t) {
      double radiatorGainRate = (r->T.state - T.state) * U_RADIATOR * A_RADIATOR;
      double wallLossRate = (T.state - env->T.state) * A_WALL * U_WALL;
      double roofLossRate = (T.state - env->T.state) * A_ROOF * U_ROOF;
      double windowLossRate = (T.state - env->T.state) * A_WINDOW * w->u_Window.state;
      T.rate = (radiatorGainRate - windowLossRate - wallLossRate - roofLossRate) / (C_AIR * V_ROOM *D_AIR);
    }
  } 

  passive class Window() implements(Behavior) {
    boolean isOpen = FALSE;
    ContinuousVariable u_Window;
  
    initial {
      u_Window.state= U_CLOSED_WINDOW;
      theIntegrator->attachODE(ME, 0);
    } 
  
    concrete method derivatives(double t) {
      u_Window.state= isOpen?U_OPEN_WINDOW:U_CLOSED_WINDOW;
    } 
  }
  
  abstract passive class Radiator() implements(Behavior) {
    double tT=TEMP_NOFREEZE;
    boolean isOn=FALSE;
    double lambda=0; // thermostat opening

    ContinuousVariable T;
    
    initial {
      T.state = tT;
      theIntegrator->attachVar(&T);
      theIntegrator->attachODE(ME, 1);  
    } 
  }
  
  passive class WaterRadiator(double phi_init) subclass(Radiator) implements (Behavior) {
    double phi=phi_init;   //°C       ~ hysteresis of temperature control
    
    concrete method derivatives(double t)  {
      double tempDiff = tT - room->T.state;
      double T1, T2;

      tT = isOn?TEMP_DAY_NOMINAL:TEMP_NOFREEZE;

      if (tempDiff <=0) lambda=0.0;
      else if (tempDiff >= phi) lambda=1.0;
      else lambda= tempDiff / phi;
    
      T1 = lambda * F_WATER / V_RADIATOR_WATER  * (env->b->T.state - T.state) ;
      T2 = U_RADIATOR * A_RADIATOR * (room->T.state - T.state ) / (V_RADIATOR_WATER * D_WATER * C_WATER);  
      T.rate = T1 + T2;
    } 
  } 

  passive class ElectricalRadiator(double phi_init) subclass(Radiator) implements (Behavior) {
    double phi=phi_init;   //°C       ~ hysteresis of temperature control
    
    concrete method derivatives(double t)  {
      double tempDiff = tT - room->T.state;
      double inpPower, outpPower;

      if (lambda>0 && tempDiff <= 0) lambda=0.0;
      if (lambda<1 && tempDiff >= phi) lambda=1.0;
      
      inpPower= (lambda * P_RADIATOR) / (C_WATER * V_RADIATOR_WATER * D_WATER);		
      // below should be the same as for the room, see also water case
      outpPower = U_RADIATOR * A_RADIATOR * (room->T.state - T.state ) / (V_RADIATOR_WATER * D_WATER * C_WATER);  
      T.rate = inpPower + outpPower;
      } 
  } 

  dfsm Charlie
    state sleeping 
      enter room->r->isOn = FALSE
      leave room->r->isOn = TRUE,
    state active,
    state working,
    state airing 
      enter room->w->isOpen = TRUE
      leave room->w->isOpen = FALSE,
    state preparingNight,
    transitions
      sleeping at 06:00 to active,
      active   at 10:00 to working,
      active   with randomOpen to airing,
      active   at 22:00 to preparingNight,
      working  after 04:00 to active,
      airing   at 10:00 to working,
      airing   with randomClose to active,
      airing   at 22:00 to preparingNight,
      preparingNight with randomClose to sleeping
//      preparingNight with randomClose to final
    where
      randomOpen = normal(02:00, 00:30),
      randomClose = uniform(00:05, 00:10)
    initial sleeping;
    
  class Resident() {  
    
    actions {
      theIntegrator->attachPuck(ACTIVE);
      
      debug Charlie; // could also: run Charlie;
    } 
  } 

  procedure main {  
    // integrator configuration
    double min_h  = 0.0001 * Minute;
    double max_h  = 10.0* Minute;
    double err_limit   = 0.1;
    theIntegrator= new RKM_Integrator (max_h, min_h, RELATIVE, err_limit);  
    
    env =      new Environment;
    room =     new Room;
    resident = new Resident();
    
    Tracer diagram ("RoomChart");
    Tracer observed ("RoomObserved");

    activate resident;

    theIntegrator->attachPuck(ACTIVE);
    activate theIntegrator;     

    trace diagram 
          ( env->T.state named env.T, env->b->T.state named env.b.T, 
            room->T.state named room.T, (room->w->isOpen?1:0)*10.0 named room.w.isOpen, 
            room->r->T.state named room.r.T, room->r->tT named room.r.tT, room->r->lambda *10.0 named room.r.lambda 
          ) 
      every 10*Second watch theIntegrator;

    trace observed 
          ( env->T.state named env.T,
            room->T.state named room.T, 
            (room->w->isOpen?1:0)*10.0 named room.w.isOpen,
            (room->r->isOn?1:0)*10.0 named room.r.isOn
          ) 
      every 10*Second watch theIntegrator;

    wait until time >= EXPERIMENT_DURATION;
    
    plot diagram as "pdf" using (EXPERIMENT_DURATION>3*Day)?"plot_day.plt":"plot_hour.plt";
    plot observed as "pdf" using (EXPERIMENT_DURATION>3*Day)?"plot_day.plt":"plot_hour.plt";
    exit(0);
  }
} 