#define SLX2 ON
import <ContinuousSmall>
import <PlotTrace>
import <ValueTable>
import <TimeBaseSeconds>
import <TemperatureHistory>

import <HeatingConstants>

module RoomHeating {
  //========== Experiment parameters
  constant double TEMP_NIGHT_NOMINAL= 7;      // °C -- frost protection
//  constant double TEMP_NIGHT_NOMINAL= 15;      // °C
  constant double TEMP_ROOM_MIDNIGHT=   13;      // °C
  constant double TEMP_DAY_NOMINAL=   22;      // °C
  constant double BOILER_WATER_TEMP=  40;      // °C
  constant double EXPERIMENT_DURATION = 2*Day;
  //========== End Experiment parameters

  pointer (Environment) env;
  pointer (Boiler)      boiler;
  pointer (Radiator)    radiator;
  pointer (Room)        room;
  pointer (Resident)    resident;

  passive class Environment implements (Behavior) {
    ContinuousVariable temp;
    ValueTable temp_out(Hour);
    pointer(Point) p;
    
    initial {
      load history data into temp_out;
      temp.state = temp_out.linear(0);

      theIntegrator->attachODE(ME, 1);  
    }
  
    concrete method derivatives(double t) {
      temp.state = temp_out.linear(time);
    }
  }

  passive class Boiler (double boilerTemp) implements (Behavior) {
    ContinuousVariable temp;
    double initTemp = boilerTemp; // °C
  
    initial {
      temp.state= initTemp;
//      theIntegrator->attachVar(&temp);
      theIntegrator->attachODE(ME, 0);
    } 
  
    concrete method derivatives(double t) {
//      temp.rate= 0.0;
      temp.state= initTemp;
    } 
  } 

  abstract passive class Radiator(double initTemp) implements(Behavior) {
    double tempNominal=TEMP_NIGHT_NOMINAL;
    double onOff=0; // call it lever? or control?

    ContinuousVariable temp;
    
    initial {
      temp.state = tempNominal;
      theIntegrator->attachVar(&temp);
      theIntegrator->attachODE(ME, 1);  
    } 
  }
  
  passive class WaterRadiator(double initTemp, double initHyst) subclass(Radiator(initTemp)) implements (Behavior) {
    double hysteresis=initHyst;   //°C       ~ hysteresis of temperature control
    
    concrete method derivatives(double t)  {
      double tempIN = boiler->temp.state;
      double tempDiff = tempNominal - room->temp.state;
      double T1, T2;

      if (tempDiff <=0) onOff=0.0;
      else if (tempDiff >= hysteresis) onOff=1.0;
      else onOff= tempDiff / hysteresis;
    
      T1 = onOff * F_WATER / V_RADIATOR_WATER  * (tempIN - temp.state) ;
      T2 = K_RADIATOR * A_RADIATOR * (room->temp.state - temp.state ) / (V_RADIATOR_WATER * D_WATER * C_WATER);  
      temp.rate = T1 + T2;
    } 
  } 

  passive class ElectricalRadiator(double initTemp, double initHyst) subclass(Radiator(initTemp)) implements (Behavior) {
    double hysteresis=initHyst;   //°C       ~ hysteresis of temperature control
    
    concrete method derivatives(double t)  {
      double tempDiff = tempNominal - room->temp.state;
      double inpPower, outpPower;

      if (onOff>0 && tempDiff <= -hysteresis) onOff=0.0;
      if (onOff<1 && tempDiff >= hysteresis) onOff=1.0;
      
      // calculate average opening of onoff for amount of time
    
      inpPower= (onOff * P_RADIATOR) / (C_WATER * V_RADIATOR_WATER * D_WATER);		
      // below should be the same as for the room, see also water case
      outpPower = K_RADIATOR * A_RADIATOR * (room->temp.state - temp.state ) / (V_RADIATOR_WATER * D_WATER * C_WATER);  
      temp.rate = inpPower + outpPower;
      } 
  } 

  passive class Room() implements (Behavior) {  
    double k_Window = K_CLOSED_WINDOW;
    ContinuousVariable temp; 
  
    initial {
      temp.state = radiator->tempNominal;
      theIntegrator->attachVar(&temp);
      theIntegrator->attachODE(ME, 1);
    }
        
    concrete method derivatives(double t) {
      double radiatorGainRate = (radiator->temp.state - temp.state) * K_RADIATOR * A_RADIATOR;
      double wallLossRate = (temp.state - env->temp.state) * A_WALL * K_WALL;
      double roofLossRate = (temp.state - env->temp.state) * A_ROOF * K_ROOF;
      double windowLossRate = (temp.state - env->temp.state) * A_WINDOW * k_Window;
      temp.rate = (radiatorGainRate - windowLossRate - wallLossRate - roofLossRate) / (C_AIR * V_ROOM *D_AIR);
    }
  } 

	type ResidentState enum { Sleeping, Active, Working, Airing, finalAiring };
	type ResidentEvent enum { wakeup, workStart, workEnd, needAir, enoughAir, timeToSleep };
  class Event(double t, ResidentEvent s) { double when=t; ResidentEvent what=s; }
  class Resident() {  
  
	  ResidentState myState = Sleeping;
    set(Event) ranked (ascending when) calendar;
    pointer(Event) currentEvent;
    
    rn_stream windowClose, windowOpen; // use better names
    
    actions {
      theIntegrator->attachPuck(ACTIVE);
      
      place new Event(6*Hour, wakeup) into calendar; // sleep until 6
      place new Event(10*Hour, workStart) into calendar; // go to work at 10
      place new Event(22*Hour, timeToSleep) into calendar; // prepare to bed at 22

      print "Starting simulation";
      forever {
        currentEvent = first Event in calendar;
        remove currentEvent from calendar;
        print (myState) ", state is now _. ";
        print (currentEvent->when/Hour, currentEvent->what) "At __.__, we want to _\n";
        advance currentEvent->when - time; // wait until the time of the event
        print ((time%Day)/Hour, (time%Hour)/Minute, floor(time/Hour)%24, floor(time/Minute)%60, myState, currentEvent->what) "__:__ (or __:__): _ -> _";

        switch (currentEvent->what) {
          case wakeup: // regulate temperature and plan next airing
            radiator->tempNominal = TEMP_DAY_NOMINAL;
          case workEnd: // this part applies to wakeup and workEnd
            place new Event(time+Hour+rv_expo(windowOpen, 1 *Hour), needAir) into calendar;
            myState = Active;
            break;
          case workStart: // close the window if it was still open
            room->k_Window = K_CLOSED_WINDOW;
            place new Event(time+4*Hour, workEnd) into calendar; // leave for 4 hours
            place new Event(time+24*Hour, workStart) into calendar; // do the same tomorrow
            myState = Working;
            break;
          case needAir: // open window and schedule closing
            if (myState != Active) break; // do not air unless active
            room->k_Window = K_OPEN_WINDOW;
            place new Event(time+rv_uniform(windowClose, 15*Minute, 25*Minute), enoughAir) into calendar;
            myState = Airing;
            break;
          case enoughAir: // close window and plan next airing
            room->k_Window = K_CLOSED_WINDOW;
            if (myState == Airing) { // plan next airing
              place new Event(time+Hour+rv_expo(windowOpen, 1*Hour), needAir) into calendar;
              myState = Active;
            }
            if (myState == finalAiring) { // go to sleep for 8 hours
              place new Event(time+8*Hour, wakeup) into calendar;
              myState = Sleeping;
            }
            break;
          case timeToSleep:
            radiator->tempNominal = TEMP_NIGHT_NOMINAL;
            room->k_Window = K_OPEN_WINDOW;
            place new Event(time+24*Hour, timeToSleep) into calendar; // do the same tomorrow
            place new Event(time+rv_normal(windowClose, 20*Minute, 5*Minute), enoughAir) into calendar;
            myState = finalAiring;
            break;
        }
      }
    } 
  } 

  procedure main {  
    // integrator configuration (maybe do it silently?)
    double min_h  = 0.0001 * Minute;
    double max_h  = 10.0* Minute;
    double err_limit   = 0.1;
    theIntegrator= new RKM_Integrator (max_h, min_h, RELATIVE, err_limit);  
    
    env= new Environment;
    boiler =new Boiler (BOILER_WATER_TEMP);
    radiator= new WaterRadiator (TEMP_ROOM_MIDNIGHT, 1.0);
//    radiator= new ElectricalRadiator (TEMP_ROOM_MIDNIGHT, 0.2);
    room= new Room;
    resident= new Resident ();
    
    Tracer diagram ("RoomChart");
    Tracer observed ("RoomObserved");

    activate resident;

    theIntegrator->attachPuck(ACTIVE);
    activate theIntegrator;     

    trace diagram 
          ( env->temp.state named TemperatureOutside, boiler->temp.state named TemperatureBoiler, radiator->temp.state named TemperatureHeating, 
            radiator->temp.rate*100 named HeatingChange,
            room->temp.state named TemperatureRoom, room->k_Window *1.0 named WindowHeatLoss, radiator->tempNominal named wantedTemperature,  
            radiator->onOff *10.0 named ValveHeating ) 
      every 10*Second watch theIntegrator;

    trace observed 
          ( env->temp.state named TemperatureOutside, room->temp.state named TemperatureRoom, room->k_Window *1.0 named WindowOpen, radiator->onOff *10.0 named HeatingOnOff ) 
      every 10*Second watch theIntegrator;

    advance EXPERIMENT_DURATION;
    
    plot diagram as "pdf";
    plot observed as "pdf";
    exit(0);
  }
} 