#define SLX2 ON
import <ContinuousSmall>
import <PlotTrace>
import <ValueTable>
import <StateMachine>
import <TimeBaseSeconds>
import <TemperatureHistory>

import <HeatingConstants>

module RoomHeating {
  //========== Experiment parameters
  public constant double TEMP_NIGHT_NOMINAL=    7;      // °C -- frost protection
  public constant double TEMP_ROOM_MIDNIGHT=   13;      // °C -- at start
  public constant double TEMP_DAY_NOMINAL=     22;      // °C
  public constant double BOILER_WATER_TEMP=    40;      // °C
  public constant double EXPERIMENT_DURATION = 2*Day;
  //========== End Experiment parameters

  pointer (Environment) env;
  pointer (Boiler)      boiler;
  pointer (Radiator)    radiator;
  pointer (Room)        room;
  pointer (Resident)    resident;

  passive class Environment implements (Behavior) {
    ContinuousVariable temp;
    ValueTable temp_out(Hour);
    pointer(Point) p;
    
    initial {
      load history data into temp_out;
      temp.state = temp_out.linear(0);

      theIntegrator->attachODE(ME, 1);  
    }
  
    concrete method derivatives(double t) {
      temp.state = temp_out.linear(time);
    }
  }

  passive class Boiler (double boilerTemp) implements (Behavior) {
    ContinuousVariable temp;
    double initTemp = boilerTemp; // °C
  
    initial {
      temp.state= initTemp;
//      theIntegrator->attachVar(&temp);
      theIntegrator->attachODE(ME, 0);
    } 
  
    concrete method derivatives(double t) {
//      temp.rate= 0.0;
      temp.state= initTemp;
    } 
  } 

  abstract passive class Radiator(double initTemp) implements(Behavior) {
    double tempNominal=TEMP_NIGHT_NOMINAL;
    double onOff=0; // call it lever? or control?

    ContinuousVariable temp;
    
    initial {
      temp.state = tempNominal;
      theIntegrator->attachVar(&temp);
      theIntegrator->attachODE(ME, 1);  
    } 
  }
  
  passive class WaterRadiator(double initTemp, double initHyst) subclass(Radiator(initTemp)) implements (Behavior) {
    double hysteresis=initHyst;   //°C       ~ hysteresis of temperature control
    
    concrete method derivatives(double t)  {
      double tempIN = boiler->temp.state;
      double tempDiff = tempNominal - room->temp.state;
      double T1, T2;

      if (tempDiff <=0) onOff=0.0;
      else if (tempDiff >= hysteresis) onOff=1.0;
      else onOff= tempDiff / hysteresis;
    
      T1 = onOff * F_WATER / V_RADIATOR_WATER  * (tempIN - temp.state) ;
      T2 = K_RADIATOR * A_RADIATOR * (room->temp.state - temp.state ) / (V_RADIATOR_WATER * D_WATER * C_WATER);  
      temp.rate = T1 + T2;
    } 
  } 

  passive class ElectricalRadiator(double initTemp, double initHyst) subclass(Radiator(initTemp)) implements (Behavior) {
    double hysteresis=initHyst;   //°C       ~ hysteresis of temperature control
    
    concrete method derivatives(double t)  {
      double tempDiff = tempNominal - room->temp.state;
      double inpPower, outpPower;

      if (onOff>0 && tempDiff <= -hysteresis) onOff=0.0;
      if (onOff<1 && tempDiff >= hysteresis) onOff=1.0;
      
      // calculate average opening of onoff for amount of time
    
      inpPower= (onOff * P_RADIATOR) / (C_WATER * V_RADIATOR_WATER * D_WATER);		
      // below should be the same as for the room, see also water case
      outpPower = K_RADIATOR * A_RADIATOR * (room->temp.state - temp.state ) / (V_RADIATOR_WATER * D_WATER * C_WATER);  
      temp.rate = inpPower + outpPower;
      } 
  } 

  passive class Room() implements (Behavior) {  
    double k_Window = K_CLOSED_WINDOW;
    ContinuousVariable temp; 
  
    initial {
      temp.state = radiator->tempNominal;
      theIntegrator->attachVar(&temp);
      theIntegrator->attachODE(ME, 1);
    }
        
    concrete method derivatives(double t) {
      double radiatorGainRate = (radiator->temp.state - temp.state) * K_RADIATOR * A_RADIATOR;
      double wallLossRate = (temp.state - env->temp.state) * A_WALL * K_WALL;
      double roofLossRate = (temp.state - env->temp.state) * A_ROOF * K_ROOF;
      double windowLossRate = (temp.state - env->temp.state) * A_WINDOW * k_Window;
      temp.rate = (radiatorGainRate - windowLossRate - wallLossRate - roofLossRate) / (C_AIR * V_ROOM *D_AIR);
    }
  } 

  statemachine Charlie
    state sleeping 
      enter radiator->tempNominal = TEMP_NIGHT_NOMINAL
      leave radiator->tempNominal = TEMP_DAY_NOMINAL ,
    state active,
    state working,
    state airing 
      enter room->k_Window = K_OPEN_WINDOW
      leave room->k_Window = K_CLOSED_WINDOW ,
    state preparingNight
    transitions
      sleeping with att 06:00 to active,
      active   with att 10:00 to working,
      active   with randomOpen to airing,
      active   with att 22:00 to preparingNight,
      working  with afterr 04:00 to active,
      airing   with att 10:00 to working,
      airing   with randomClose to active,
      airing   with att 22:00 to preparingNight,
      preparingNight with randomClose to sleeping
//      preparingNight with randomClose to finall
    where
      randomOpen = normal(02:00, 00:30),
      randomClose = uniform(00:05, 00:10)
    initial sleeping
    
  class Resident() {  
    
    actions {
      theIntegrator->attachPuck(ACTIVE);
      
      debug Charlie;
    } 
  } 

  procedure main {  
    // integrator configuration
    double min_h  = 0.0001 * Minute;
    double max_h  = 10.0* Minute;
    double err_limit   = 0.1;
    theIntegrator= new RKM_Integrator (max_h, min_h, RELATIVE, err_limit);  
    
    env= new Environment;
    boiler =new Boiler (BOILER_WATER_TEMP);
    radiator= new WaterRadiator (TEMP_ROOM_MIDNIGHT, 1.0);
//    radiator= new ElectricalRadiator (TEMP_ROOM_MIDNIGHT, 0.2);
    room= new Room;
    resident= new Resident ();
    
    Tracer diagram ("RoomChart");
    Tracer observed ("RoomObserved");

    activate resident;

    theIntegrator->attachPuck(ACTIVE);
    activate theIntegrator;     

    trace diagram 
          ( env->temp.state named TemperatureOutside, boiler->temp.state named TemperatureBoiler, radiator->temp.state named TemperatureHeating, 
            radiator->temp.rate*100 named HeatingChange,
            room->temp.state named TemperatureRoom, room->k_Window *1.0 named WindowHeatLoss, radiator->tempNominal named wantedTemperature,  
            radiator->onOff *10.0 named ValveHeating ) 
      every 10*Second watch theIntegrator;

    trace observed 
          ( env->temp.state named TemperatureOutside, room->temp.state named TemperatureRoom, room->k_Window *1.0 named WindowOpen, radiator->onOff *10.0 named HeatingOnOff ) 
      every 10*Second watch theIntegrator;

    advance EXPERIMENT_DURATION;
    
    plot diagram as "pdf";
    plot observed as "pdf";
    exit(0);
  }
} 