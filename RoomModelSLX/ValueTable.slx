//*****************************************************************************
// 	Module ValueTable
//           generate tables of values
//*****************************************************************************

#define SLX2 ON
#define TRACE

public module ValueTables
{
	passive class ValueTable (double unit) {
		set(Point) ranked (ascending x) data;
		double currentTime, nextTime;
		double currentTemp, nextTemp;
    double granularity=unit; // factor for first parameter
		
		method add(double t, double v) {
			place new Point(t, v) into data;
		}
		
		method init() {
			pointer(Point) p;
			p = first Point in data;
			currentTime = p->x * granularity;
			currentTemp = p->y;
			remove p from data;
			p = first Point in data;
			nextTime = p->x * granularity;
			nextTemp = p->y;
			remove p from data;
		}
		
		method refresh(double t) {
			if (t >= nextTime) {
				pointer(Point) p;
				
				currentTime = nextTime;
				currentTemp = nextTemp;
				
				p = first Point in data;
				if (p != NULL) {
					nextTime = p->x * granularity;
					nextTemp = p->y;
					remove p from data;
				} else {
					nextTime = currentTime + granularity;
				}
			}
		}
		
		method linear(double t) returning double {
			refresh(t);
			return currentTemp + (t-currentTime)/(nextTime-currentTime) * (nextTemp-currentTemp);
		}
	}
	
	statement autofill #var @from #starts step #steps @with {#v},...;
	definition {
		int i;
		expand(#starts) "double pos = #;";
		
		for (i = 1; #v[i] != ""; ++i) {
			expand(#var, #v[i]) "#.add(pos,#);";
      expand(#steps) "pos += #;";
		}
		
		expand(#var) "#.init();";
	}
	
	statement fill #var @with {(#t, #v)},...;
	definition {
		int i;
		
		for (i = 1; #t[i] != ""; ++i) {
			expand(#var, #t[i], #v[i]) "#.add(#,#);";
		}
		
		expand(#var) "#.init();";
	}
	
} //end of module ValueTable