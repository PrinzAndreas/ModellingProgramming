//*****************************************************************************
// 	Module StateMachine
//           handle finite state machines
//*****************************************************************************

#define SLX2 ON
#define TRACE

import <TimeBaseSeconds>

public module StateMachines
{
  abstract class FSMTime {
    abstract method nextTime() returning double;
  }
  class FSMTimeAt(double t) subclass (FSMTime) { double when=t; 
    concrete method nextTime() returning double {
      double nextT = when;
      while (time>nextT) nextT+=Day; // align with Day rhythm
      return nextT;
    }
  }
  class FSMTimeAfter(double t) subclass (FSMTime) { double delay=t; 
    concrete method nextTime() returning double {
      return time+delay;
    }
  }
  class FSMTimeAfterRandom_uniform(pointer(rn_stream) r, double fromT, double toT) subclass (FSMTime) { 
    pointer(rn_stream) rand=r; double startT=fromT; double endT=toT; double nextT=0;
    concrete method nextTime() returning double {
      if (time>nextT) nextT=time+rv_uniform(*rand, startT, endT); // new random time
      return nextT;
    }
  }
  class FSMTimeAfterRandom_normal(pointer(rn_stream) r, double meanT, double distT) subclass (FSMTime) { 
    pointer(rn_stream) rand=r; double mT=meanT; double dT=distT; double nextT=0;
    concrete method nextTime() returning double {
      if (time>nextT) nextT=time+rv_normal(*rand, mT, dT); // new random time
      return nextT;
    }
  }
  
  class FSMTransition(pointer(FSMTime) t, pointer(FSMState) s) { pointer(FSMTime) when=t; pointer(FSMState) what=s; }

  passive class FSMState(string(*) theName) {
    string(20) naming=theName;
    set(FSMTransition) transitions;
    double nextT=-1;
    pointer(FSMState) nextS;
    overridable public method enterState() returning boolean { return TRUE; }
    overridable public method exitState() {}
    method addTransition(pointer(FSMTransition) t) { place t into transitions; }
    method nextState() returning pointer(FSMState) {
      nextTime();
      return nextS;
    }
    method nextTime() returning double {
      pointer(FSMTransition) trans;
      if (nextT>time) return nextT;
      nextT = (first FSMTransition in transitions)->when->nextTime()+1;
			for (trans = each FSMTransition in transitions) {
				if (trans->when->nextTime() < nextT) {
					nextT = trans->when->nextTime();
          nextS = trans->what;
        }
			}
      return nextT;
    }
  }

  abstract class FSM() {
    abstract private method initialState() returning pointer(FSMState);
    
    method debug() { execute(TRUE); }
    
    method run() { execute(FALSE); }
    
    private method printTime() {
      int h=floor(time/Hour)%24, m=(time/Minute)%60;
      if (h<10) print (h) "0_:"; else print (h) "__:";
      if (m<10) print (m) "0_: "; else print (m) "__: ";
    }
    
    private method execute(boolean debug) {
      pointer(FSMState) currentState = initialState();
  
      if(debug) { printTime(); print (currentState->naming) "Starting state machine in state _.\n"; }
      
      forever {
        if (currentState != NULL) { 
          if (!(currentState->enterState())) {
            if(debug) { printTime(); print "Exiting state machine.\n"; }
            return; 
          }
        }
        advance currentState->nextTime()-time; // wait for next transitions
        if(debug) { printTime(); print (currentState->naming, currentState->nextState()->naming) "Leaving state _ and entering state _.\n"; }
        currentState->exitState();
        currentState=currentState->nextState();
      }
    }
  }

  passive class FSMStatefinal() subclass (FSMState("finalState")) {
    override public method enterState() returning boolean { return FALSE; }
  }
		
  statement dfsm #name { @state #sn [@enter #into = #ival] [@leave #outof = #oval] , }... 
     @transitions { #snFrom { { @with #trigger } | { @at #h1 : #m1 } | { @after #h2 : #m2 } } @to { @final | #snTo } },... 
     [@where { #rn = #rdist ( #rt1 : #rm1 , #rt2 : #rm2 ) },...]
     @initial #isn ;

	definition {
    int i;

    for (i = 1; #sn[i] != ""; ++i) {
      expand(#sn[i],#sn[i]) "passive class FSMState#() subclass (FSMState(\"#\")) {";
      if (#into[i] != "")
        expand(#into[i], #ival[i]) "override public method enterState() returning boolean { # = #; return TRUE; }";
      if (#outof[i] != "")
        expand(#outof[i], #oval[i]) "override public method exitState() { # = #; }";
      expand(#sn[i]) "}";
    }
		
		expand(#name) "class #_FSM subclass (FSM) {";
    for (i = 1; #sn[i] != ""; ++i) {
      expand(#sn[i],#sn[i]) "pointer(FSMState) # = new FSMState#();";
    }
    expand(#name) "pointer(FSMState) finalState = new FSMStatefinal();";

    for (i = 1; #rn[i] != ""; ++i) {
      expand(#rn[i]) "rn_stream #_Gen;";
    }

    for (i = 1; #rn[i] != ""; ++i) {
      expand(#rn[i],#rdist[i],#rn[i],#rt1[i],#rm1[i],#rt2[i],#rm2[i]) "pointer(FSMTime) # = new FSMTimeAfterRandom_#(&#_Gen,#*Hour+#*Minute,#*Hour+#*Minute);";
    }

		expand(#name) "initial {";
    for (i = 1; #snFrom[i] != ""; ++i) {
      expand(#snFrom[i]) "#->addTransition(new FSMTransition(";
      if (#trigger[i] != "")
        expand(#trigger[i]) "#,";
      else if (#h1[i] != "")
        expand(#h1[i],#m1[i]) "new FSMTimeAt(#*Hour+#*Minute),";
      else if (#h2[i] != "")
        expand(#h2[i],#m2[i]) "new FSMTimeAfter(#*Hour+#*Minute),";
      if (#snTo[i] != "")
        expand(#snTo[i]) "#));";
      else
        expand(#snFrom[i]) "finalState));";
    }
		expand(#name) "}";

		expand(#isn) "concrete method initialState() returning pointer(FSMState) { return #; }";
    
		expand(#name) "}";
	}

  statement debug #stm;
  definition {
    expand(#stm) "pointer(FSM) theFSM =new #_FSM(); theFSM->debug();";
  }

  statement run #stm;
  definition {
    expand(#stm) "(new #_FSM())->run();";
  }
}
