//*****************************************************************************
//	Associative Functions
//*****************************************************************************

private precursor module AssociationMacros
	{
	statement association ( <#in_type #in_subtype type> ,... : <#out_type #out_subtype type> ) #aname ;
	  definition
		{
		string(64)	arg_in[20], type_in[20], arg_out, type_out;
		int			i, tuple_count;

//		describe #aname "association name";

		i = 1;
		while (#in_type[i] != "")
			{
			type_in[i] = #in_type[i] cat #in_subtype[i];

			if (#in_type[i] == "string")
				arg_in[i]	= "string(*)";
			else 
				arg_in[i] = type_in[i];
			
			++tuple_count;
			++i;
			}

		type_out	= #out_type cat #out_subtype;
		if (#out_type == "string")
			arg_out = "string(*)";
		else
			arg_out = type_out;
					
		expand(#aname, #aname)	"pointer(#_association) #_mapping;\n\n";

		expand (#aname)			"set(#_association)	ranked(";

		for (i = 1; i <= tuple_count; i++)
			{
			expand(i)			"ascending input_value#";

			if (i == tuple_count)
				expand			") ";
			else
				expand			", ";
			}
		
		expand(#aname)		"#_association_set;\n\n";

		expand (#aname)		"class #_association(";

		for (i = 1; i <= tuple_count; i++)

			expand(arg_in[i], i)	"# init_input#, ";

		expand(arg_out)		"# init_output)"
									"\t{\n";

		for (i = 1; i <= tuple_count; i++)

			expand(type_in[i], i)	"\t#\tinput_value#;\n";

		expand(type_out)			"\t#\toutput_value;\n\n";

		expand						"\tinitial"
									"\t\t{\n";

		for (i = 1; i <= tuple_count; i++)

			expand(i, i)	"\t\tinput_value#\t = init_input#;\n";

		expand(#aname)			"\t\toutput_value\t = init_output;"
									""
									"\t\tplace ME into #_association_set;"
									"\t\t}"
									"\t};\n\n";

		expand (#aname)		"macro map_# (";

		for (i = 1; i <= tuple_count; i++)
			{
			expand(i)			"\#arg#";

			if (i == tuple_count)
				expand			")\n";
			else
				expand			", ";
			}

		expand 				"  definition"
								"\t{"
								"\texpand (";

		for (i = 1; i <= tuple_count; i++)
			{
			expand(i)			"\#arg#";

			if (i == tuple_count)
				expand			")\n\n";
			else
				expand			", ";
			}

		expand(#aname)		"\"(retrieve #_association(";

		for (i = 1; i <= tuple_count; i++)
			{
			expand(i)			"input_value# = #";

			if (i == tuple_count)
				expand(#aname)

								") from #_association_set) -> output_value\";"
								"\t}\n\n";			
			else
				expand			", ";
			}

		expand (#aname)		"describe @map_# \"maps (";

		for (i = 1; i < tuple_count; i++)
			expand(type_in[i])			"#, ";

		expand(type_in[tuple_count], type_out)
										"#) into #\";\n";
		}

	describe association	"an association is a collection of mappings, each of which maps one or more input values into an output value, all of which may be of differing types";

	macro associate #output @with #input,... @in #association
	  definition
		{
		int		i;

		expand (#association)		"new #_association(";

		for (i = 1; #input[i] != ""; i++)
			expand(#input[i])	"#, ";
		
		expand(#output)				"#);\n";
		}

	macro remove_association( #input,... ) @from #association
	  definition
		{
		int		i;

		expand(#association)			"{"
										"#_mapping = mapping(";

		for (i = 1; #input[i] != ""; i++)
			{
			expand(#input[i])	"#";
		
			if (#input[i+1] == "")
				expand(#association)

										") in #;\n\n";
			else
				expand					", ";
			}

		expand	(#association, #association, #association, #association)

										"if (#_mapping != NULL)"
											"\tremove #_mapping from #_association_set;"
										"else"
//											"\tSLXDebugger(\"# does not contain the specified association\");"
											"\tdiagnose invocation run_time error \"# does not contain the specified association\";"
										"}\n\n";
		}

	macro map #association (#input,...)
	  definition
		{
		int		i;

		expand (#association)	"retrieve #_association(";

		for (i = 1; #input[i] != ""; i++)
			{
			expand (i, #input[i])	"input_value# = #";

			if (#input[i+1] != "")
				expand			", ";
			else
				expand (#association)

								") from #_association_set;\n";
			}
		}

	macro mapping (#input,...) @in #association
	  definition
		{
		int		i;

		expand (#association)	"retrieve #_association(";

		for (i = 1; #input[i] != ""; i++)
			{
			expand (i, #input[i])	"input_value# = #";

			if (#input[i+1] != "")
				expand			", ";
			else
				expand (#association)

								") from #_association_set";
			}
		}

	}	// end of precursor module

module AssociationDemo
	{
	class widget
		{
		int		i;
		};

	typedef enum { RED, GREEN, BLUE }	color;

	association(int, double, color : string(20)) idc_to_string;
	association(string(20) : pointer(puck)) test;

	procedure main()
		{
		pointer(idc_to_string_association)		i3_to_s;
		string(20)									s, joh;

		associate "Jim Henriksen" with 1000, 2.5, BLUE in idc_to_string;

		i3_to_s = mapping(1000, 2.5, BLUE) in idc_to_string;

		if ((mapping(1000, 2.5, BLUE) in idc_to_string) == NULL)
			print "no string  associated with 1000, 2.5, BLUE\n";
		else			
			print "There's a string  associated with 1000, 2.5, BLUE\n";

		// Specific mapping macro follows...  (class-specific, automatically generated by the "association" statement)

		// NOTE: The following statement will go down with a NULL pointer reference if there's no string associated
		// with the 3-tuple provided

		// To prevent such errors, you can use the "map" or "mapping" macro to get a pointer to the association
		// object.  If the pointer is NULL, there's no association.
		
		joh = map_idc_to_string(1000, 2.5, BLUE);		

		print (joh)		"String \"_\" is associated with 1000, 2.5, BLUE\n";

		remove_association(1000, 2.5, BLUE) from idc_to_string;

		if ((mapping(1000, 2.5, BLUE) in idc_to_string) == NULL)
			print "no string  associated with 1000, 2.5, BLUE\n";
		else			
			print "There's a string  associated with 1000, 2.5, BLUE\n";

//		remove_association(1000, 2.5, BLUE) from idc_to_string;		// will call the SLX debugger

		exit(0);
		}
	}