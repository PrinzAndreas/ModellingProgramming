//*****************************************************************************
//	Pointers To Procedures
//*****************************************************************************

#define SLX2		ON

//#define SYNTAX_ERRORS		ON
//#define SEMANTIC_ERRORS	ON
//#define RUNTIME_ERRORS	ON

precursor module TestPrecursor
	{
	public class www
		{
		int			iii = 111, jjj = 222;
		double	xxx;
		
		method fetch1(int i, int j) returning int
			{
			int		jj = jjj;
			
			return i;
			}
		};
	
	pointer(method(int i, int j) returning int)		msel1;

	public procedure ppp() returning int
		{
		pointer(www)	wp = new www;
		
//		msel1 = NULL;
		msel1 = &www::fetch1;
		
		return (wp ->* msel1) (123, 456);
		}
	}

module PointerToProc
	{
	class widget
		{
		int			iii = 111, jjj = 222;
		double	xxx = 123.456;
		
		method fetch1(int i, int j) returning int
			{
			return j;
			}

		method fetch2() returning int
			{
			return jjj;
			}

		method fetch3() returning double
			{
			return xxx;
			}
		};
	
	class widget2
		{
		method fetch1() returning int
			{
			return 2000;
			}
		};
	
	procedure main()
		{
		pointer(widget)		w;
		pointer(*)			uw;
		int						i;
		int						ix[5];
		double				x;
				
		pointer(procedure (int i, double x) returning int)		p1;					// procedure selector
		pointer(procedure)											p2;
		pointer(procedure returning double)						p3;
		
		pointer(method(int i, int j) returning int)		mselector1;
		pointer(method returning int)					mselector2;		// method selector
		
#ifdef SYNTAX_ERRORS
		i = (*(w -> mselector)) ();
		i = (*(mselector)) ();
		
#endif		

#ifdef SEMANTIC_ERRORS
		mselector1= &widget2::fetch1;
		mselector1= &widget::fetch3;
		mselector1= &widget2::fetch1;
		mselector1= NULL;
		mselector1= p1;
		mselector1= &fetch2;
		i = w;
		p1 = w;

		pointer(procedure (double i, double x[*]) returning int)			p2;
		p2 = &widget::fetch2;
		p2 = p1;

		pointer(procedure (out int i, inout double x) returning int)		p3;
		p3 = &widget::fetch2;

		pointer(procedure (pointer(puck) p, double x) returning int)	p4;
		p4= &func;

		pointer(procedure (puck_state ps[*], double x) returning int)	p5;
		p5 = &func;

		pointer(procedure (inout int i, inout double x) returning int)	p6;
		p6= &func;
#endif		
	
		p1 = &func;
//		p1 = NULL;


		i = (*p1) (i, x);					// indirect call of an ordinary (non-method) procedure

		print (i)	"i = _  (should be 999)\n";
		
		i = 0;		

		w = new widget;

		mselector1= &widget::fetch1;

		i = (w ->* mselector1) (123, 456);		// indirect method call			NOTE ->* OPERATOR
		
		print (i)	"i = _  (should be 456)\n";
		
		mselector2= &widget::fetch2;

//		w = NULL;
//		mselector2 = NULL;
		
		i = (w ->* mselector2) ();					// indirect method call			NOTE ->* OPERATOR
		
		print (i)	"i = _  (should be 222)\n";
		
		i = ppp();

		print (i)	"i = _  (should be 123)\n";
		
		x = w -> fetch3();
		
		print (x)	"x = ___.___  (should be 123.456)\n";			// "ordinary" method call

#ifdef RUNTIME_ERRORS

		uw = new www;
		
		x = uw -> fetch3();
//		w = NULL;

		x = w -> fetch3();
		
		i = (w ->* mselector2) ();

		mselector2 = NULL;
		i = (w ->* mselector2) ();
#endif		
		exit(0);
		}
	
//	procedure func(int i, double x) returning boolean
//	procedure func(out int i, double x) returning int

	procedure func(int i, double x) returning int
		{
		int		j;
		
		return 999;
		}
	}