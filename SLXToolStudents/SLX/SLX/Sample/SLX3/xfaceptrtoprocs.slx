//*****************************************************************************
//	Interface Pointers To Procedures
//*****************************************************************************

#define SLX2		ON

module PointerToProc
	{
	typedef pointer(method returning pointer(widget))	WPTR;
	
	interface	xptrs
		{
		abstract WPTR	mselector;
		};

	class widget implements(xptrs)
		{
		int		iii = 111, jjj = 222;
		
		method fetch1() returning pointer(puck)
			{
//			return ME;
			return ACTIVE;
			}

		overridable method fetch2() returning pointer(widget)
			{
			return ME;
			}

//		concrete pointer(method returning pointer(PointerToProc::widget))		mselector;
//		concrete pointer(method returning pointer(*))									mselector;
//		concrete pointer(method returning pointer(puck))							mselector;
		concrete WPTR																		mselector;
		};
	
	class inner_widget subclass(widget)
		{
		override method fetch2() returning pointer(widget)
			{
			return ME;
			}
		};

	procedure main()
		{
		pointer(widget)			w, w2;
		pointer(inner_widget)	iw;
		
		int				i;
		double		x;
		
		w = new widget;
		w -> mselector = &widget::fetch2;

		w2 = (w ->* (w -> mselector)) ();
		
		print (w2)		"w2 = _  (Should be widget 1)\n";
				
		iw = new inner_widget;
		iw -> mselector = &inner_widget::fetch2;
		
		w2 = (iw ->* (iw -> mselector)) ();

		print (w2)		"w2 = _  (Should be inner_widget 1)\n";
				
//		w2 = (*(w -> mselector)) ();
		
//		w2 = w -> mselector;
		
		exit(0);
		}
	}