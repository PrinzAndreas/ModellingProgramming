/*

Note:  This example was originally developed by Kiva's Mike Allen.

It was subsequently modified by JOH to remove Mike's in-line questions
and suggestions and to reflect changes made to SLX.

Abstract class representing the linear motion state of a moving object.
Negative velocities are OK - means that object is moving backwards.

All distance units measured in meters, all time units in seconds.

All classes placed in their own modules to increase encapsulation.

*/

#define SLX2	ON

private module AbstractMotionStateModule
	{
	public passive class AbstractMotionState (pointer (AbstractMotionState) priorState)
		{
		private double timeEnteredState;
		private double initialVelocity;

		initial
			{
			timeEnteredState = time;
			if (priorState != NULL)
				{
				initialVelocity = priorState->getCurrentVelocity ();
				}
			else
				{
				initialVelocity = 0.0;
				}
			}

		public abstract method getCurrentAcceleration () returning double { }
//		public method getCurrentAcceleration () returning double { }

		public method getInitialVelocity () returning double
			{
			return initialVelocity;
			}

		public method getCurrentVelocity () returning double
			{
			return initialVelocity + getCurrentAcceleration () * getTimeInState ();
			}

		public method getTimeInState () returning double
			{
			return time - timeEnteredState;
			}

		public method getDistanceTraveledInState () returning double
			{
			double timeSpent;
			timeSpent = getTimeInState ();

			return initialVelocity * timeSpent + getCurrentAcceleration () * timeSpent * timeSpent / 2.0;
			}
		}
	}

/*
State for an object that is moving at a constant velocity.
*/

private module CruisingStateModule
	{
	public passive class CruisingState (pointer (AbstractMotionState) priorState)
	subclass (AbstractMotionState (priorState))
		{

		//	"concrete" keyword added to explicitly declare a methods as fulfilling an "abstract" requirement

//		public						concrete method getCurrentAcceleration ()
		public overridable 	concrete method getCurrentAcceleration ()
		
		returning double
			{
			return 0.0;
			}
		}
	}

/*

State of an object that is speeding up (positive acceleration) or slowing down
(negative acceleration).

This is implemented as a special case of the CruisingState (that has a non-zero
acceleration), but we could obviously have done this differently.  This was
done to illustrate a specific point.

*/

private module AcceleratingStateModule
	{
	public passive class AcceleratingState (pointer (AbstractMotionState)
	priorState, double newAcceleration)
	subclass (CruisingState (priorState))
		{
		private double acceleration;
		initial
			{
			acceleration = newAcceleration;
			}

		public override method getCurrentAcceleration () returning double
			{
			return acceleration;
			}
		}
	}

/*
An object that moves and uses the motion states defined above.
*/

private module MoverModule
	{
	public passive class Mover
		{
		pointer (AbstractMotionState) motionState;
		double distanceTraveled;
		initial
			{
			motionState = new CruisingState (NULL);
			distanceTraveled = 0.0;
			}

		public method cruise ()
			{
			updateStats ();

			motionState = new CruisingState (motionState);
			}

		public method accelerate (double acceleration)
			{
			updateStats ();

			motionState = new AcceleratingState (motionState, acceleration);
			}

		private method updateStats ()
			{
			distanceTraveled += motionState->getDistanceTraveledInState ();
			}

		public method getDistanceTraveled () returning double
			{
			return distanceTraveled + motionState->getDistanceTraveledInState
			();
			}

		public method getCurrentVelocity () returning double
			{
			return motionState->getCurrentVelocity ();
			}

		public method getMeanVelocity () returning double
			{
			if (time > 0.0)
				{
				return getDistanceTraveled () / time;
				}

			return 0.0;
			}

		public method getCurrentAcceleration () returning double
			{
			return motionState->getCurrentAcceleration ();
			}
		}
	}

/*
Class to monitor a single mover.
*/

private module MoverMonitorModule
	{
	public class MoverMonitor (pointer (Mover) moverMonitored)
		{
		pointer (Mover) mover;
		initial
			{
			mover = moverMonitored;
			}

		actions
			{
			forever
				{
				print (
					
					time,
					mover->getDistanceTraveled (),
					mover->getCurrentVelocity (),
					mover->getMeanVelocity (),
					mover->getCurrentAcceleration ())
					
					"_.____: Dist=_.____, " cat "Vel=_.____, Avg Vel=_.____, Acc=_.____\n";
				
				advance 1.0;
				}
			}
		}
	}

/*
Main procedure.
*/

private module MainModule
	{
	public procedure main ()
		{
		pointer (Mover) mover;

		mover = new Mover ();
		pointer (MoverMonitor) moverMonitor;
		moverMonitor = new MoverMonitor (mover);
		activate moverMonitor priority 100;
		
		mover->accelerate (0.1);
		advance 1.0;
		
		mover->accelerate (1.0);
		advance 10.0;
		
		mover->accelerate (0.1);
		advance 1.0;
		
		mover->cruise ();
		advance 20.0;
		
		exit (0);
		}
	}