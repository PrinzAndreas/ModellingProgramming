module test_enum_first_last_pred_succ

	{
	typedef enum { red, white, blue, black }	color;

	color global_blue = blue;
	color global_colors[0...3] = { red, white, blue };

	string(5)	should_be[0...5] = { "NONE", "red", "white", "blue", "black", "NONE" };

	procedure main()
		{
		enum { purple, red, blue }	x, y, z;
		color				this_color;
		integer 			i;

		this_color = first color;

		print (this_color)	"this color = *****  should = red\n";

		this_color = last color;

		print (this_color)	"this color = *****  should = black\n\n";

		this_color = first color;
		for (i = 1; i <= 4; i++)
			{
			print (should_be[i], this_color)   "should be *****  is *\n";

			this_color = successor(this_color);
			}

		print (this_color)	"\nthis color = *****  should = NONE\n\n";

		this_color = last color;
		for (i = 4; i >= 1; i--)
			{
			print (should_be[i], this_color)   "should be *****  is *\n";

			this_color = predecessor(this_color);
			}

		print (this_color)	"\nthis color = *****  should = NONE\n";

		i = 1;
		for (this_color = each color)
			{
			print (should_be[i], this_color)   "should be *****  is *\n";
			++i;
			}

		print (this_color)	"\nthis color = *****  should = NONE\n";

		this_color = NONE;
		print (this_color, predecessor(this_color), successor(this_color))

"\n"
"this color = *****  should be NONE"
"pred	    = *****  should be NONE"
"succ	    = *****  should be NONE\n\n";

		print (successor(blue) in color)	"succ(blue)  = *****  should be black\n\n";

		print (successor(black) in color)	"succ(black) = *****  should be NONE\n\n";

		print (predecessor(white) in color)	"pred(white) = *****  should be red\n\n";

		print (predecessor(red) in color)	"pred(red)   = *****  should be NONE\n\n";

		print (first color, last color) 	"first, last colors: *, *  should be red, black\n\n";
		exit(0);
		}
	}