//*****************************************************************************
//      Module ConveyorStatementsAndMacros
//*****************************************************************************

public module ConveyorStatementsAndMacros
	{
	macro CircularDistance(#PointA, #PointB, #LoopSize)
	  definition
		expand (#PointB, #PointA, #LoopSize, #LoopSize)

			"((((#) - (#)) + # + EPSILON)  % # - EPSILON)";
	
	macro WaitForLoadPresent(#Conveyor, #Position)
	  definition
		expand (#Conveyor, #Position, #Position)	"WaitForZoneNotEmpty(#, #, #)";
		
	macro WaitForNoLoadPresent(#Conveyor, #Position)
	  definition
		expand (#Conveyor, #Position, #Position)	"WaitForZoneEmpty(#, #, #)";

	statement CVR_Conveyor { #Conveyor [@length = ] #Length [speed = ] #Speed
						{ <#acc accumulating> | <#slip slippageOK> | <#circular	circular> | { segments = #Segments } }*
						[title = #Title]
						},...;
	  definition
		{
		int				i;
		boolean		acc, slippage, circular;
		string(128)	segs, title;

		for (i = 1; #Conveyor[i] != ""; i++)
			{
			if (#acc[i] != "")
				acc = TRUE;
			else
				acc = FALSE;

			if (#slip[i] != "")
				slippage = TRUE;
			else
				slippage = FALSE;

			if (#circular[i] != "")
				circular = TRUE;
			else
				circular = FALSE;

			if (#Segments[i] != "")
				segs = #Segments[i];
			else
				segs = "0";

			if (#Title[i] != "")
				title = #Title[i];
			else
				title = "\"\"";

			expand (#Conveyor[i], #Length[i], #Speed[i], acc, slippage, circular, segs, title)

				"Conveyor\t#(#, #, #, #, #, #, #);\n";
			}
		}

	statement CVR_Sensor	(#Conveyor)	{ #Sensor @position [=] #Position [width [=] #Width] },...;
	  definition
		{
		int		i;

		for (i = 1; #Sensor[i] != ""; i++)
			{
			expand (#Sensor[i], #Conveyor, #Position[i])	"Sensor\t# = { &(#), #";

			if (#Width[i] != "")
				expand (#Position[i], #Width[i], #Position[i])	", { # - (#), # }};\n";
			else
				expand	"};\n"; 
			}
		}

	statement CVR_ConveyorSpeed(#Conveyor) = #Speed ;
	  definition
		expand(#Conveyor, #Speed)
			"SetConveyorSpeed(#, #);\n";

	statement CVR_LoadSpeed(#Load) = #Speed ;
	  definition
		expand(#Load, #Speed)
			"SetLoadSpeed(#, #);\n";

	statement CVR_LoadClass	{ #LoadClass [leading = #Leading] @size = #Size [title = #Title] },...;
	  definition
		{
		int		i;

		for (i = 1; #LoadClass[i] != ""; i++)
			{
			if (#Leading[i] != "")
				expand (#LoadClass[i], #Leading[i], #Leading[i], #Size[i])
					"LoadClass\t# = { #, (#) - (#)";
			else
				expand (#LoadClass[i], #Size[i])
					"LoadClass\t# = { 0.0, -(#)";

			if (#Title[i] != "")
				expand (#Title[i])	", # };\n";
			else
				expand (#LoadClass[i])	", \"#\" };\n";
			}
		}

	statement CVR_Place		[@object] #Object [@class] #Class on #Conveyor [@at #Offset]
										[<#Zone zone> = { { ( #ZoneStart, #ZoneEnd ) } | #ZoneName } ]
										@PLS = #pls;
	  definition
		{
		static int	TempZoneID;
		string(128)	ConveyorOffset;

		// Process optional zone waits

		if (#Zone != "")
			if (#ZoneName != "")
				expand (#Conveyor, #ZoneName)		"\tWaitForZoneEmpty(#, #);\n";
			else
				{
				expand(++TempZoneID)
					"ConveyorZone\tTempZone#;\n";

				expand (TempZoneID, #ZoneStart)
					"\tTempZone#.ZoneStart = #;\n";

				expand (TempZoneID, #ZoneEnd)
					"\tTempZone#.ZoneEnd = #;\n";

				expand (#Conveyor, TempZoneID)
					"\tWaitForZoneEmpty(#, TempZone#);\n";
				}				

		if (#Offset == "")
			ConveyorOffset = "0.0";
		else
			ConveyorOffset = #Offset;

		expand (#pls, #Object, #Class, #Conveyor, ConveyorOffset)
			"\t# = PlaceOn(#, #, #, #);\n";
		}
 
	statement CVR_Remove	#Load @from #Conveyor ;
	  definition
		expand (#Load, #Conveyor)	"RemoveLoad(#, #);\n";

	statement CVR_Ride		#Load [@to #Destination] ;
	  definition
		{
		if (#Destination != "")
			expand (#Load, #Destination)	"ConveyLoad(#, #);\n";
		else
			expand (#Load, #Load)		"ConveyLoad(#, (#) -> LoadConveyor -> ConveyorLength);\n";

		expand (#Load)	"wait until ((#) -> Arrived);\n";
		}

	statement CVR_Send		#Load [@to #Destination] ;
	  definition
		if (#Destination != "")
			expand (#Load, #Destination)	"ConveyLoad(#, #);\n";
		else
			expand (#Load, #Load)		"ConveyLoad(#, (#) -> LoadConveyor -> ConveyorLength);\n";

	}	// End of ConveyorStatementsAndMacros module