//*****************************************************************************
//      Module Conveyors
//*****************************************************************************

import "cvrstmac"

public module Conveyors
	{
//T	filedef trace output name="trace.dat";					//TRACE

	typedef float				DISTANCE,				// More distinctive type names
								POSITION,
								SPEED,
								TIME;

	typedef enum { ON, OFF }	ON_OFF;

	typedef pointer(Conveyor)	PCONV;
	typedef pointer(LoadStatus)	PLS;

	constant float				EPSILON = 0.00001,			// Tolerate roundoff errors
								HUGE = 1.0E200,				// Effective infinity
								SENSOR_WIDTH = 0.001;	// small, but finite

#ifdef OLD_CURRENT_POS
	procedure CurrentPosition(PLS Load) returning POSITION
		{
		if (! Load -> LoadConveyor -> Circular)
			return Load -> LoadPosition + Load -> LoadSpeed * (time - Load -> LoadTlast);

		// Fall-through => circular

		return	(Load -> LoadPosition
				+ Load -> LoadSpeed * (time - Load -> LoadTlast)
				+ Load -> LoadConveyor -> ConveyorLength) 
				% Load -> LoadConveyor -> ConveyorLength;

		}	// End of CurrentPosition(...)
#else
	macro CurrentPosition (#Load)
	  definition
		{
		expand (#Load, #Load, #Load, #Load)
			"inline double"
			"\t{"
			"\tif (! (#) -> LoadConveyor -> Circular)"
			"\t\treturn (#) -> LoadPosition + (#) -> LoadSpeed * (time - (#) -> LoadTlast);\n\n";
															
		expand (#Load, #Load, #Load, #Load, #Load)
		
			"\treturn ((#) -> LoadPosition"
			"\t\t+ (#) -> LoadSpeed * (time - (#) -> LoadTlast)"
			"\t\t+ (#) -> LoadConveyor -> ConveyorLength)"
			"\t\t% (#) -> LoadConveyor -> ConveyorLength;"
			"\t}\n\n";
			
		}
#endif	
	entity_class	Conveyor;

	class Conveyor(

		DISTANCE	Length,
		SPEED	Speed,
		boolean	Acc,
		boolean	Slip,
		boolean	Circ,
		int			Segs,
		string(*)	ReportTitle)

		{
		string(32)				title;

		control int				ChangeCount;
		boolean				Accumulating, Circular, SlippageAllowed;
		control SPEED		ConveyorSpeed;
		DISTANCE				ConveyorLength;

		PLS					FirstLoad,
								LastLoad;

		int						SegmentCount;

		initial
			{
			ConveyorSpeed	= Speed;
			ConveyorLength	= Length;
			Accumulating		= Acc;
			Circular			= Circ;
			SlippageAllowed	= Slip or Acc;					
			SegmentCount		= Segs;

			if (ReportTitle != "")
				title = ReportTitle;
			else
				get_slx_name(ME, title);

			place ME into Conveyor_set;
			}
		};

	class ConveyorZone
		{
		POSITION				ZoneStart,		// Upstream end
								ZoneEnd;		// Downstream end
		};

	class LoadClass
		{
		DISTANCE				LeadingEdge,		// usually positive
								TrailingEdge;		// usually negative
		string(64)				LoadClassName;
		};

	class LoadStatus
		{
		control int				ChangeCount;
		control SPEED		LoadSpeed;
		control boolean		Arrived;

		pointer(*)				LoadObject;

		POSITION				LoadPosition;
		TIME					LoadTlast;

		PLS					UpstreamLoad,
								DownstreamLoad;

		PCONV				LoadConveyor;

		DISTANCE				LeadingEdge,
								TrailingEdge;
		};

	class Sensor
		{
		pointer(Conveyor)		SensorConveyor;
		DISTANCE				SensorOffset;
		ConveyorZone			SensorZone;
		TIME					DepartureTime;
		DISTANCE				DeltaD;
		PLS					Load;
		control PLS			SensorCurrentLoad;
		control pointer(*)		SensorCurrentObject;
		int						LocalChangeCount;

		initial
			{
			SensorZone.ZoneStart = SensorOffset - SENSOR_WIDTH;
			SensorZone.ZoneEnd = SensorOffset;

			activate ME;		// self-activating
			}

		actions
			{
			forever	// monitor sensor state transitions
				{
				// wait for sensor to trigger

				Load = WaitForZoneFull(*SensorConveyor, SensorZone);

				SensorCurrentLoad = Load;
				SensorCurrentObject = Load -> LoadObject;
				
				// wait for sensor to clear

				WaitForZoneEmpty(*SensorConveyor, SensorZone);

				SensorCurrentObject = NULL;
				SensorCurrentLoad = NULL;
				Load = NULL;
				}
			}
		};

//*****************************************************************************
//      LastLoadInZone - returns pointer(LoadStatus)
//*****************************************************************************

	procedure LastLoadInZone(

		Conveyor		Conv,
		ConveyorZone Zone,
		inout PLS 		NextLoadIn)	returning PLS

		{
		PLS			Load, Load1, FirstLoad;
		POSITION		LoadPos;
		DISTANCE		Distance, SmallestDistance;
		
		if (! Conv.Circular)		// Non-circular conveyors are easier
			{
			if (Zone.ZoneStart < Conv.ConveyorLength * 0.5)
				for (Load = Conv.FirstLoad; Load != NULL; Load = Load -> DownstreamLoad)
					{
					LoadPos = CurrentPosition(Load);

					if (LoadPos + Load -> TrailingEdge > Zone.ZoneEnd - EPSILON)
						return NULL;

					if (LoadPos + Load -> LeadingEdge > Zone.ZoneStart - EPSILON)
						return Load;

					NextLoadIn = Load;
					}
			else
				for (Load = Conv.LastLoad; Load != NULL; Load = Load -> UpstreamLoad)
					{
					LoadPos = CurrentPosition(Load);

					if (LoadPos + Load -> LeadingEdge < Zone.ZoneStart - EPSILON)
						{
						NextLoadIn = Load;
						return FirstLoad;
						}

					if (LoadPos + Load -> TrailingEdge < Zone.ZoneEnd - EPSILON)
						FirstLoad = Load;
					}

			return FirstLoad;
			}

		// Fall-through => circular

		Load = Conv.FirstLoad;
		if (Load == NULL)
			{
			NextLoadIn = NULL;
			return NULL;
			}

		SmallestDistance = INFINITY;
		Load1 = Load;
		forever
			{
			Distance = CircularDistance(
								Zone.ZoneStart,
								CurrentPosition(Load) + Load -> LeadingEdge,
								Conv.ConveyorLength);

			if (Distance < SmallestDistance)
				{
				SmallestDistance = Distance;
				FirstLoad = Load;
				}

			Load = Load -> DownstreamLoad;
			if (Load == Load1)
				break;				// the circle is complete
			}

		NextLoadIn = FirstLoad -> UpstreamLoad;
		if (SmallestDistance <= Zone.ZoneEnd - Zone.ZoneStart + EPSILON) 
			return FirstLoad;
		else
			return NULL;

		}	// End of LastLoadInZone(...)

//*****************************************************************************
//      FirstLoadInZone - returns pointer(LoadStatus)
//*****************************************************************************

	procedure FirstLoadInZone(

		Conveyor		Conv,
		ConveyorZone Zone,
		inout PLS		PrevLoadOut)	returning PLS

		{
		PLS			Load, Load1, LastLoad;
		POSITION		LoadPos;
		DISTANCE		Distance, SmallestDistance;
		
		if (! Conv.Circular)		// Non-circular conveyors are easier
			{
			if (Zone.ZoneStart < Conv.ConveyorLength * 0.5)
				{
				for (Load = Conv.FirstLoad; Load != NULL; Load = Load -> DownstreamLoad)
					{
					LoadPos = CurrentPosition(Load);

					if (LoadPos + Load -> TrailingEdge > Zone.ZoneEnd -EPSILON)
						{
						PrevLoadOut = Load;
						return LastLoad;
						}

					if (LoadPos + Load -> LeadingEdge > Zone.ZoneStart - EPSILON)
						LastLoad = Load;
					}

				return LastLoad;
				}
			else
				{
				PrevLoadOut = NULL;

				for (Load = Conv.LastLoad; Load != NULL; Load = Load -> UpstreamLoad)
					{
					LoadPos = CurrentPosition(Load);

					if (LoadPos + Load -> LeadingEdge < Zone.ZoneStart - EPSILON)
						return NULL;

					if (LoadPos + Load -> TrailingEdge < Zone.ZoneEnd - EPSILON)
						return Load;

					PrevLoadOut = Load;
					}

				return NULL;
				}
			}

		// Fall-through => circular

		Load = Conv.FirstLoad;
		if (Load == NULL)
			{
			PrevLoadOut = NULL;
			return NULL;
			}

		SmallestDistance = INFINITY;
		Load1 = Load;
		forever
			{
			Distance = CircularDistance(
								LoadPos + Load -> TrailingEdge,
								Zone.ZoneEnd,
								Conv.ConveyorLength);

			if (Distance < SmallestDistance)
				{
				SmallestDistance = Distance;
				LastLoad = Load;
				}

			Load = Load -> DownstreamLoad;
			if (Load == Load1)
				break;				// the circle is complete
			}

		PrevLoadOut = LastLoad -> DownstreamLoad;

		if (SmallestDistance < Zone.ZoneEnd - Zone.ZoneStart + EPSILON)
			return LastLoad;
		else
			return NULL;

		}	// End of FirstLoadInZone(...)

	procedure ArrivalTime(PLS Load, DISTANCE EdgeOffset, POSITION ConvPos) returning TIME
		{
		DISTANCE		DeltaD;

		if (Load -> LoadSpeed == 0.0)
			return HUGE;

		if (Load -> LoadConveyor -> Circular)
			DeltaD = CircularDistance(
						CurrentPosition(Load) + EdgeOffset,
					 	ConvPos,
						Load -> LoadConveyor -> ConveyorLength);
		else
			DeltaD = ConvPos - CurrentPosition(Load) - EdgeOffset;
		
		if (DeltaD >= 0.0)
			return time + DeltaD / Load -> LoadSpeed;

		if (DeltaD > -EPSILON)
			return time;

		if (Load -> LoadConveyor -> Circular)
			return time + (Load -> LoadConveyor -> ConveyorLength + DeltaD) / Load -> LoadSpeed;

		diagnose caller run_time warning (Load, CurrentPosition(Load) + EdgeOffset, Load -> LoadConveyor, ConvPos)

"Load _ is at offset _.____ of _.  (Already past offset _.___)";

		return time;

		}	// End of ArrivalTime(...)

//*****************************************************************************
//      WaitForZoneEmpty
//*****************************************************************************

	procedure WaitForZoneEmpty(

		Conveyor		Conv,
		ConveyorZone Zone)

		{
		PLS		Load, NextLoadIn;
		TIME		ZoneDepartureTime;
		int			LocalChangeCount;
	
		forever
			{
			Load = LastLoadInZone(Conv, Zone, NextLoadIn);

			if (Load == NULL)
					return;

			LocalChangeCount = Load -> ChangeCount;
			if (Load -> LoadSpeed == 0.0)
				wait until (Load -> ChangeCount > LocalChangeCount);
			else
				{
				ZoneDepartureTime = ArrivalTime(Load, Load -> TrailingEdge, Zone.ZoneEnd);
				wait until (time == ZoneDepartureTime || Load -> ChangeCount != LocalChangeCount);
				}
			}			

		}	// End of WaitForZoneEmpty(...)
		

//*****************************************************************************
//      WaitForZoneNotEmpty returns PLS for first load in zone (or NULL)
//*****************************************************************************

	procedure WaitForZoneNotEmpty(

		Conveyor		Conv,
		ConveyorZone	Zone)	returning PLS
		{
		PLS		Load, NextLoadIn;
		TIME		ZoneArrivalTime;
		int			LocalChangeCount;
	
		forever
			{
			Load = LastLoadInZone(Conv, Zone, NextLoadIn);
			if (Load != NULL)
				return Load;

			if (NextLoadIn != NULL)
				{
				LocalChangeCount = NextLoadIn -> ChangeCount;
				if (NextLoadIn -> LoadSpeed == 0.0)
					wait until (NextLoadIn -> ChangeCount != LocalChangeCount);
				else
					{					
					ZoneArrivalTime = ArrivalTime(NextLoadIn, NextLoadIn -> TrailingEdge, Zone.ZoneEnd);
					wait until (time == ZoneArrivalTime || NextLoadIn -> ChangeCount != LocalChangeCount);
					}
				}
			else
				{
				LocalChangeCount = Conv.ChangeCount;
				wait until (Conv.ChangeCount > LocalChangeCount);
				}
			}			

		}	// End of WaitForZoneNotEmpty(...)

//*****************************************************************************
//      WaitForZoneFull
//*****************************************************************************

	procedure WaitForZoneFull(

		Conveyor		Conv,
		ConveyorZone Zone)		returning PLS
		{
		DISTANCE		Distance;
		PLS			Load, Load1, NextLoadIn;
		POSITION		LoadPos, PriorFrontPos;
		TIME			ZoneArrivalTime;
		int				LocalChangeCount;
	
		forever
			{
			Load = LastLoadInZone(Conv, Zone, NextLoadIn);
			Load1 = Load;

			PriorFrontPos = Zone.ZoneStart;
			while (Load != NULL)
				{
				LoadPos = CurrentPosition(Load);

				if (Conv.Circular)
					{
					Distance = CircularDistance(PriorFrontPos, LoadPos + Load -> TrailingEdge, Conv.ConveyorLength);
					if (Distance < Load -> LeadingEdge - Load -> TrailingEdge - EPSILON)

						break;							// gap exists downstream from this load
					}
				else
					if (LoadPos + Load -> TrailingEdge - PriorFrontPos > EPSILON)

						break;							// gap exists downstream from this load

				PriorFrontPos = LoadPos + Load -> LeadingEdge;

				if (PriorFrontPos >= Zone.ZoneEnd - EPSILON)
					return Load;
				 
				Load = Load -> UpstreamLoad;
				if (Load == Load1)					// circular wrap-around
					break;
				}
		
			if (Load != NULL && Load != Load1)
				{
				ZoneArrivalTime = ArrivalTime(Load, Load -> LeadingEdge, Zone.ZoneEnd);
				LocalChangeCount = Load -> ChangeCount;
				wait until (time == ZoneArrivalTime || Load -> ChangeCount != LocalChangeCount);
				}
			else
				if (NextLoadIn != NULL)
					{
					ZoneArrivalTime = ArrivalTime(NextLoadIn, NextLoadIn -> LeadingEdge, Zone.ZoneEnd);
					LocalChangeCount = NextLoadIn -> ChangeCount;
					wait until (time == ZoneArrivalTime || NextLoadIn -> ChangeCount != LocalChangeCount);
					}
				else
					{
					LocalChangeCount = Conv.ChangeCount;
					wait until (Conv.ChangeCount > LocalChangeCount);
					}
			}			

		}	// End of WaitForZoneFull(...)

//*****************************************************************************
//      WaitForZoneNotFull
//*****************************************************************************

	procedure WaitForZoneNotFull(

		Conveyor		Conv,
		ConveyorZone Zone)

		{
		DISTANCE		Distance, Excess;
		PLS			Load, Load1, PrevLoadOut;
		POSITION		LoadPos, PriorEdgePos;
		TIME			RetryTime;
		int				ConvChanges, LoadChanges;

		forever
			{
    			Load = FirstLoadInZone(Conv, Zone, PrevLoadOut);
			if (Load == NULL)
				return;

			Load1 = Load;
			PriorEdgePos = Zone.ZoneEnd;

			forever
				{
				LoadPos = CurrentPosition(Load);

				if (Conv.Circular)
					Distance = CircularDistance(LoadPos + Load -> LeadingEdge, PriorEdgePos, Conv.ConveyorLength);
				else
					Distance = PriorEdgePos - (LoadPos + Load -> LeadingEdge);
	
				if (Distance > EPSILON)
					return;						// gap exists downstream from this load

				PriorEdgePos = LoadPos + Load -> TrailingEdge;
				Excess = Zone.ZoneStart - PriorEdgePos;

				if (Excess < 0.0)
					{
					Load = Load -> UpstreamLoad;
					if (Load == NULL || Load == Load1)

						return;				// out of loads => not full
					else
						continue;			// the inner forever loop
					}
			
				if (Excess < EPSILON)
					Excess = EPSILON;

				ConvChanges = Conv.ChangeCount;
				if (Load1 -> LoadSpeed == 0.0)
					{
					LoadChanges = Load1 -> ChangeCount;

					wait until (	Load1 -> ChangeCount > LoadChanges || Conv.ChangeCount > ConvChanges);

					break;	// out of the inner forever loop; retry the outer
					}

				RetryTime = time + Excess / Load1 -> LoadSpeed;
				wait until (time == RetryTime || Conv.ChangeCount != ConvChanges);

				break;	// out of the inner forever loop; retry the outer

				}	// End of the inner forever loop
		
			}	// End of the outer forever loop

		}	// End of WaitForZoneNotFull(...)

//*****************************************************************************
//	PlaceOn - places an arbitrary object on a conveyor, at a specified
//	offset, creates a LoadStatus object for it, and returns a pointer to the
//	LoadStatus object (PLS)
//*****************************************************************************

	procedure PlaceOn(

		pointer(*)			LoadObject,
		pointer(LoadClass)	Lclass,
		inout Conveyor	Conv,
		POSITION			Offset)			returning PLS

		{
		PLS			Successor,
						Predecessor,
						Load1,
						OldLoad,
						NewLoad;

		DISTANCE		Distance, SmallestDistance, Overlap;
		POSITION		OldPos;

		NewLoad = new LoadStatus;
		NewLoad -> LoadTlast = time;
		NewLoad -> LoadObject = LoadObject;
		NewLoad -> LoadConveyor = &Conv;
		NewLoad -> LoadPosition = Offset;
		NewLoad -> LeadingEdge = Lclass -> LeadingEdge;
		NewLoad -> TrailingEdge = Lclass -> TrailingEdge;
		NewLoad -> LoadSpeed = Conv.ConveyorSpeed;

//T		write file=trace (time, NewLoad, LoadObject, &Conv, Offset)	"_.____: _ (_) placed on _ at _.____\n";

		Conv.ChangeCount++;		// Placing a load => change

		if (! Conv.Circular)			// Non-circular conveyors are easier
			{
			if (Conv.FirstLoad == NULL)
				{
				Conv.FirstLoad = NewLoad;
				Conv.LastLoad = NewLoad;
				return NewLoad;
				}
			else	
				{
				if (Offset < Conv.ConveyorLength * 0.5)
					for (Successor = Conv.FirstLoad; Successor != NULL; Successor = Successor -> DownstreamLoad)
						{
						OldPos = CurrentPosition(Successor);
						if (OldPos > Offset)
							break;
						Predecessor = Successor;
						}
				else
					for (Predecessor = Conv.LastLoad; Predecessor != NULL; Predecessor = Predecessor -> UpstreamLoad)
						{
						OldPos = CurrentPosition(Predecessor);
						if (OldPos < Offset)
							break;
						Successor = Predecessor;
						}

				if (Successor != NULL)
					{
					NewLoad -> DownstreamLoad = Successor;
					Successor -> UpstreamLoad = NewLoad;
					Successor -> ChangeCount++;

					Overlap =  CurrentPosition(Successor) - Offset - NewLoad -> LeadingEdge + Successor -> TrailingEdge;
					if (Overlap < -EPSILON)
						diagnose caller run_time warning (
							&Conv,
							NewLoad -> LoadObject,
							Offset,
							Successor -> LoadObject, 
							CurrentPosition(Successor),
							-Overlap)

						"Conveyor _:  _ (at _.___) encroaches on _ (at _.___).  Overlap: _.______";
					}
				else
					Conv.LastLoad = NewLoad;

				if (Predecessor != NULL)
					{
					NewLoad -> UpstreamLoad = Predecessor;
					Predecessor -> DownstreamLoad = NewLoad;			
					Predecessor -> ChangeCount++;

					Overlap =  Offset - CurrentPosition(Predecessor) - Predecessor -> LeadingEdge+ NewLoad -> TrailingEdge;
					if (Overlap < -EPSILON)
						diagnose caller run_time warning (
							&Conv,
							NewLoad -> LoadObject,
							Offset,
							Predecessor -> LoadObject, 
							CurrentPosition(Predecessor),
							-Overlap)

						"Conveyor _:  _ (at _.___) encroaches on _ (at _.___).  Overlap: _.______";
					}
				else
					Conv.FirstLoad = NewLoad;

				return NewLoad;
				}
			}

		// Fall-through => circular conveyor

		if (Conv.FirstLoad == NULL)
			{
			Conv.FirstLoad = NewLoad;
			Conv.LastLoad = NewLoad;

			NewLoad -> DownstreamLoad = NewLoad;	// self-circular list
			NewLoad -> UpstreamLoad = NewLoad;		// self-circular list
			return NewLoad;
			}

		SmallestDistance = INFINITY;
		OldLoad = Conv.FirstLoad;
		forever
			{
			Distance = CircularDistance(
								Offset,
								CurrentPosition(OldLoad),
								Conv.ConveyorLength);

			if (Distance < SmallestDistance)
				{
				SmallestDistance = Distance;
				Successor = OldLoad;
				}

			OldLoad = OldLoad -> DownstreamLoad;
			if (OldLoad == Conv.FirstLoad)
				break;				// the circle is complete
			}

		Predecessor = Successor -> UpstreamLoad;
		NewLoad -> UpstreamLoad = Predecessor;
		NewLoad -> DownstreamLoad = Successor;
		Successor -> UpstreamLoad = NewLoad;
		Successor -> ChangeCount++;
		Predecessor -> DownstreamLoad = NewLoad;			
		Predecessor -> ChangeCount++;

		Overlap = SmallestDistance - NewLoad -> LeadingEdge + Successor -> TrailingEdge;
		if (Overlap < -EPSILON)
			diagnose caller run_time warning (
				&Conv,
				NewLoad -> LoadObject,
				Offset,
				Successor -> LoadObject, 
				CurrentPosition(Successor),
				-Overlap)

			"Conveyor _:  _ (at _.___) encroaches on _ (at _.___).  Overlap: _.______";

		Overlap =  CircularDistance(CurrentPosition(Predecessor), Offset, Conv.ConveyorLength)
				- Predecessor -> LeadingEdge
				- NewLoad -> TrailingEdge;

		if (Overlap < -EPSILON)
			diagnose caller run_time warning (
				&Conv,
				NewLoad -> LoadObject,
				Offset,
				Predecessor -> LoadObject, 
				CurrentPosition(Predecessor),
				-Overlap)

			"Conveyor _:  _ (at _.___) encroaches on _ (at _.___).  Overlap: _.______";

		return NewLoad;
		}

//*****************************************************************************
//	RemoveLoad - removes a Load object from a conveyor
//*****************************************************************************

	procedure RemoveLoad(

		PLS				Load,
		inout Conveyor	Conv)

		{
		PLS		ThisLoad, LastLoad;

		Conv.ChangeCount++;

		ThisLoad = Conv.LastLoad;
		if (ThisLoad != NULL)
			if (Conv.Circular)
				forever
					if (ThisLoad == Load)
						{
						ThisLoad -> UpstreamLoad -> DownstreamLoad = ThisLoad -> DownstreamLoad;					
						ThisLoad -> DownstreamLoad -> UpstreamLoad = ThisLoad -> UpstreamLoad;
	
						ThisLoad -> UpstreamLoad -> ChangeCount++;
						ThisLoad -> DownstreamLoad -> ChangeCount++;

						if (ThisLoad -> DownstreamLoad == ThisLoad)	// ONLY load
							{
							Conv.FirstLoad = NULL;
							Conv.LastLoad = NULL;
							}
						else
							{
							if (ThisLoad == Conv.FirstLoad)
								Conv.FirstLoad = ThisLoad -> DownstreamLoad;

							if (ThisLoad == Conv.LastLoad)
								Conv.LastLoad = ThisLoad -> DownstreamLoad;
							}

						ThisLoad -> UpstreamLoad = NULL;
						ThisLoad -> DownstreamLoad = NULL;

						ThisLoad -> ChangeCount++;
						ThisLoad -> LoadConveyor = NULL;

						yield;				// allow change to be seen
						return;
						}
					else
						{
						if (ThisLoad == NULL)
							break;

						ThisLoad = ThisLoad -> UpstreamLoad;
						if (ThisLoad == Conv.LastLoad)				// wrapped
							break;							
						}

			else	// non-circular

				for (; ThisLoad != NULL; ThisLoad = ThisLoad -> UpstreamLoad)
					{
					if (ThisLoad != Load)
						continue;

					if (ThisLoad -> DownstreamLoad != NULL)
						{
						ThisLoad -> DownstreamLoad -> UpstreamLoad = ThisLoad -> UpstreamLoad;
						ThisLoad -> DownstreamLoad -> ChangeCount++;
						}
					else
						Conv.LastLoad = ThisLoad -> UpstreamLoad;

					if (ThisLoad -> UpstreamLoad != NULL)
						{
						ThisLoad -> UpstreamLoad -> DownstreamLoad = ThisLoad -> DownstreamLoad;
						ThisLoad -> UpstreamLoad -> ChangeCount++;
						}
					else
						Conv.FirstLoad = ThisLoad -> DownstreamLoad;

					ThisLoad -> UpstreamLoad = NULL;
					ThisLoad -> DownstreamLoad = NULL;
					ThisLoad -> LoadConveyor = NULL;
					ThisLoad -> ChangeCount++;

//T					write file=trace (time, ThisLoad, ThisLoad -> LoadObject, &Conv)	"_.____: _ (_) removed from _\n";

					yield;				// allow change to be seen
					return;
					}

		diagnose Load, Conv run_time error(Load, &Conv)		"^ (_) is not on ^ (_)";

		}	// end of RemoveLoad(...)

//*****************************************************************************
//	ConveyLoad - moves a LoadStatus object to a specified offset on a
//	conveyor.  Note that ConveyLoad returns to its caller IMMEDIATELY.
//	If the caller wishes to wait for the arrival of the load at its destination,
//	the caller can execute a wait until (Load -> Arrived)
//*****************************************************************************

	procedure ConveyLoad(

		PLS		Load,
		POSITION Destination)

		{
		pointer(Conveyor)		C;
		PLS					Predecessor, Successor;
		DISTANCE				RemDistance;
		POSITION				LoadPos,
								NextStop;
		TIME					ArrivalTime;
		int						LocalChangeCount;

		C  = Load -> LoadConveyor;
		if (C == NULL)
			diagnose Load run_time error	"^ is not on a conveyor";

		Load -> Arrived = FALSE;
		fork
			{
			forever
				{
				wait until (C -> ConveyorSpeed > 0.0);

				LoadPos = CurrentPosition(Load);
				Load -> LoadPosition = LoadPos;
				Load -> LoadTlast = time;

				Predecessor = Load -> DownstreamLoad;

				if (C -> SlippageAllowed
					&& Predecessor != NULL
					&& Predecessor != Load
					&& Predecessor -> LoadSpeed == 0.0)
					{
					NextStop 	= CurrentPosition(Predecessor)
								- Load -> LeadingEdge
								+ Predecessor -> TrailingEdge;

					if (NextStop > Destination)
						NextStop = Destination;
					}
				else
					NextStop = Destination;

				if (C -> Circular)
					RemDistance = CircularDistance(LoadPos, NextStop, C-> ConveyorLength);
				else
					RemDistance = NextStop - LoadPos;

				if (RemDistance < -EPSILON && NextStop == Destination)
					diagnose Load run_time error(Destination, C -> title) "^ has passed its destination (_.___ on _)";

				if (Load -> LoadSpeed != C -> ConveyorSpeed)
					{
					Load -> LoadSpeed = C -> ConveyorSpeed;
					Load -> ChangeCount++;

					Successor = Load -> UpstreamLoad;
					if (Successor != NULL)
						Successor -> ChangeCount++;
					}

				ArrivalTime = time + RemDistance / C -> ConveyorSpeed;
				LocalChangeCount = Load -> ChangeCount;

//T				write file=trace (time, Load, Load -> LoadObject, NextStop, ArrivalTime)
//T
//T					"_.____: _ (_) Next stop = _.____ at _.____\n";

				wait until (time >= ArrivalTime || Load -> ChangeCount > LocalChangeCount);

				if (time >= ArrivalTime)
					{
					if (Load -> LoadConveyor != NULL)		// noone else removed it
						{
						Load -> LoadPosition =CurrentPosition(Load);
						Load -> LoadTlast = time;
						Load -> LoadSpeed = 0.0;
						}

					Load -> ChangeCount++;

					if (NextStop == Destination)
						break;

					// Fall-through => load has bumped up against its predecessor

//T					write file=trace (time, Load, Load -> LoadObject, Load -> LoadPosition)
//T
//T						"_.____: _ (_) stopped at _.____\n";

					if (Load -> UpstreamLoad != NULL)
						Load -> UpstreamLoad -> ChangeCount++;

					LocalChangeCount = Load -> ChangeCount;
					wait until (Load -> ChangeCount > LocalChangeCount);
					}
				}

//T			write file=trace (time, Load, Load -> LoadObject)	"_.____: _ (_) reached destination\n";

			Load -> Arrived = TRUE;
			
			// Allow others to react to arrival

			ACTIVE -> priority = -1000;
			yield;

			if (Load -> LoadConveyor != C)	// load removed
				terminate;

			// Fall-through => Load is blocked

			if (C -> SlippageAllowed)
				{
				if (Load -> UpstreamLoad != NULL)
					Load -> UpstreamLoad -> ChangeCount++;
				}
			else
				SetConveyorSpeed(*C, 0.0);
				
			terminate;
			}

		return;				// parent puck returns immediately

		}	// End of ConveyLoad(...)

//*****************************************************************************
//	SetConveyorSpeed - Sets the speed of a conveyor and all objects on the
//	conveyor to a specifed value.
//*****************************************************************************

	procedure SetConveyorSpeed(inout Conveyor Conv, SPEED Speed)
		{
		PLS		Load;

		Conv.ConveyorSpeed = Speed;
		Conv.ChangeCount++;

		Load = Conv.FirstLoad;
		if (Load == NULL)
			return;

		forever
			{
			Load -> LoadPosition = CurrentPosition(Load);
			Load -> LoadTlast = time;
			Load -> LoadSpeed = Speed;
			Load -> ChangeCount++;

			if (Load == Conv.LastLoad)
				return;

			Load = Load -> DownstreamLoad;
			}

		}	// End of SetConveyorSpeed(...)


//*****************************************************************************
//	SetLoadSpeed - Sets the speed of a Load to a specifed value, notifies
//	the load's upstream neighbor, if any.
//*****************************************************************************

	procedure SetLoadSpeed(PLS Load, SPEED Speed)
		{
		Load -> LoadPosition = CurrentPosition(Load);
		Load -> LoadTlast = time;
		Load -> LoadSpeed = Speed;
		Load -> ChangeCount++;

		if (Load -> UpstreamLoad != NULL)
			Load -> UpstreamLoad -> ChangeCount++;

		return;

		}	// End of SetLoadSpeed(...)

	}	// End of Conveyors module
