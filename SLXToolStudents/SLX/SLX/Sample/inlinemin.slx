//*****************************************************************************
//	In-Line Expressions
//*****************************************************************************

module InlineTest
	{
	macro min (#expression,...)
	  definition
		{
		static int	expansion_count;
		string(20)	temp_name;
		string(100)	result_type;
	
		int			i, len, maxlen;
		
		if (#expression[2] == "")
			{
			diagnose caller compile_time error		"min() requires at least two arguments";
			return;
			}

//		The next section is commented out, because use of the b ? x : y operator causes truncation
//		if x is an int and y is a double.  You can uncomment it to see how it works.
			
/*		if (#expression[3] == "")			// two args (common special case)
			{
			expand (#expression[1], #expression[2], #expression[1], #expression[2])
			
				"((#) <= (#) ? (#) : (#))";
				
			return;
			}
*/
		write string=temp_name (++expansion_count)	"tempmin\_\__";

		result_type = argtypename(#expression[1]);
		if (substring(result_type, 1, 6) == "string")
			{
			read string=substring(result_type, 8)	(maxlen);

			for (i = 2; #expression[i] != ""; i++)
				{
				result_type = argtypename(#expression[i]);

				if (substring(result_type, 1, 6) != "string")
					{
					diagnose #expression[i] compile_time error	"^ must be a string";
					return;
					}
				
				read string=substring(result_type, 8)	(len);
			
				if (len > maxlen)
					maxlen = len;
				}
			
			write string=result_type	(maxlen)		"string(_)";
			}
		
		if (result_type == "int" || result_type == "double")
			{
			for (i = 2; #expression[i] != ""; i++)
				{
				result_type = argtypename(#expression[i]);

				if (result_type == "double")
					break;
					
				if (result_type != "int")
					{
					diagnose #expression[i] compile_time error	"^ must be a numeric value";
					return;
					}
				}
			}
		
   		expand(
			
			result_type,			
			result_type,			
			temp_name,
			temp_name,
			#expression[1])

|"	inline #
		{
		#	#;

		# = #;\n"|;

		for (i = 2; #expression[i] != ""; i++)
			expand(#expression[i], temp_name, temp_name, #expression[i])

|"
		if (# < #)
			# = #;\n"|;

		expand(temp_name)

|"
		return #;
		}\n"|;
		}

	procedure main()
		{
		int					i, j, k;
		double			x, y, z;

		string(10)		s1, s2;

		x = 3.33;
		y = 2.22;
		z = 1.11;
		
		z = min(x, y, z);
		print (z)			"min(x,y,z) = _._\n";
		
		i = 33;
		j = 22;
		k = 11;
		
		k = min(i, j, k);
		print (k)			"min(i,j,k) = _\n";
		
		s1 = "aa";
		s2 = "bb";
		
		s2 = min(s1, s2);
		print (s2)		"min(s1,s2) = _\n";
		
		s2 = min("cc", "bb", "aaa");
		print (s2)		"min(\"cc\",\"bb\",\"aaa\") = _\n";
		
//		i = min(i);						// insufficient args
		
//		i = min(x, s2);				// mode mismatch
		
//		i = min(i, j, "99");			// mode mismatch
		
		i = 999;
		x = 3.33;
		
		i = min(x, i);	// OK
		
		i = 999;
		x = 3.33;
		
		x = min(i, x);	// truncation?
				
		exit(0);
		}
	}