module sets_3
	{
	class obj
		{
		string(20)	name;
		integer 	priority;
		float		mtime;

		report
			{
			print (ME)	"_ report\n";
			}
		}

	class obj2
		{
		integer 	iii;
		};

	class obj3
		{
		int		i;

		double	x, y;
		};

	set(*)			generic_set;
	set(obj)		unranked_set[3];
	set(obj) ranked FIFO	fifo_set;
	set(obj) ranked LIFO	lifo_set;

	set(obj) ranked(ascending obj::name) name_set;

	set(obj) ranked(ascending mtime, descending priority)	time_set;

	pointer(set)		pset;
	
	obj			global_obj;

	procedure main
		{
//		nonNULL pointer(obj)	optr = &global_obj;
		pointer(obj)	optr;
				
		pointer(obj)	optr1, optr2, optr3;
		pointer(obj2)	o2ptr;

		pointer(*)		gptr;		// generic

		obj				local_obj;

		integer 		i = 1, j = 1;
		
		place new obj3 into generic_set;

		optr1 = new obj;
		optr2 = new obj;
		optr3 = new obj;

		optr1 -> name	= "Object C";
		optr2 -> name	= "Object B";
		optr3 -> name	= "Object A";
		local_obj.name	= "Object L";
		global_obj.name = "Object G";

		optr1 -> priority = 1;
		optr2 -> priority = 2;
		optr3 -> priority = 3;

		optr1 -> mtime = 111.0;
		optr2 -> mtime = 111.0;
		optr3 -> mtime = 333.0;

		place optr1 into generic_set;
		place optr1 into unranked_set[i+j];
		place optr1 into fifo_set;
		place optr1 into lifo_set;
		place optr1 into name_set;
		place optr1 into time_set;

		place optr2 into generic_set;
		place optr2 into unranked_set[i+j] before optr1;
		place optr2 into fifo_set;
		place optr2 into lifo_set;
		place optr2 into name_set;
		place optr2 into time_set;

		gptr = optr3;
		place gptr into generic_set;
		place gptr into unranked_set[i+j] after optr2;
		place gptr into fifo_set;
		place gptr into lifo_set;
		place gptr into name_set;
		place gptr into time_set;

		place &local_obj into name_set;
		place &global_obj into time_set;

//		place NULL into fifo_set;
//		place o2ptr into fifo_set;

		print "\nFIFO set (order C B A)\n\n";
		for (optr = each obj in fifo_set)
			print(optr, optr -> name) "* *\n";

		print "\nLIFO set (order A B C)\n\n";
		for (optr = each obj in lifo_set)
			print(optr, optr -> name) "* *\n";

		print "\nUnranked set (order B A C)\n\n";
		for (optr = each obj in unranked_set[i+j])
			print(optr, optr -> name) "* *\n";

		print "\nUnranked set (order A C)\n\n";
		for (optr = optr3;
		     optr != successor(optr1) in unranked_set[i+j];
		     optr = successor(optr) in unranked_set[i+j])
			print(optr, optr -> name) "* *\n";

		print "\nUnranked set (order B A)\n\n";
		for (optr = optr2;
		     optr != optr1;
		     optr = successor(optr) in unranked_set[i+j])
			print(optr, optr -> name) "* *\n";

		print "\nGeneric set (order C B A)\n\n";
		for (optr = each obj in generic_set)
			print(optr, optr -> name) "* *\n";

		print "\nGeneric set (order B A)\n\n";
		for (optr = successor(optr1) in generic_set;
		     optr != NULL;
		     optr = successor(optr) in generic_set)
			print(optr, optr -> name) "* *\n";

//		optr = new obj;
//		optr = successor(optr) in generic_set;		// error

//		print "\nGeneric set (order A B C)\n\n";
//		for (optr = optr3;
//		     optr != NULL;
//		     optr = predecessor(optr) in generic_set)
//			print(optr, optr -> name) "* *\n";

		print "\nTime set (order G B C A)\n\n";
		for (optr = each obj in time_set)
			print(optr, optr -> name, optr -> mtime, optr -> priority)
"* * ***.* *\n";

		print "\nName set (order A B C L)\n\n";
		for (optr = each obj in name_set)
			print(optr, optr -> name) "* *\n";

		remove optr2 from name_set;
		remove &local_obj from name_set;

		print "\nName set (order A C)\n\n";
		for (optr = each obj in name_set)
			{
			print(optr, optr -> name) "* *\n";
			}

		empty set name_set;

		pset = &generic_set;
		empty *pset;
		}
	}