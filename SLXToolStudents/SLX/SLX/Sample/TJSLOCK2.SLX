#define FAST_STATS	ON

import <h8>

module Schriber_Canal_and_Lock
	{
#ifdef STUDENT_VERSION
	int	NREPS = 50;
#else
	int	NREPS = 100;
#endif

	int			eastmax,
				westmax;

	int			total_barges;

	control enum { low, high } lock_level;

	control boolean 	lock_busy;

	control int	eastbound_permitted,
				east_canal_contents,
				westbound_permitted,
				west_canal_contents;

	queue	eastq	title = "Tvl East",
				westq	title = "Tvl West";

	rn_stream	east,
				west;

	random_variable 	transit_time;
	random_variable 	normality	histogram start=240.0 width=30.0 count=30;

	 class lock_manager
		{
		actions
			{
			forever
				{
				while (eastq.usage.current_value > 0)
					{
					eastbound_permitted = eastmax;

					wait until (eastbound_permitted == 0
						or  eastq.usage.current_value == 0);

					eastbound_permitted = 0;

					if (westq.usage.current_value > 0)
						{
						wait until (east_canal_contents + west_canal_contents == 0
							    and not lock_busy);

						break;
						}
					}

				while (westq.usage.current_value > 0)
					{
					westbound_permitted = westmax;

					wait until (westbound_permitted == 0
						or  westq.usage.current_value == 0);

					westbound_permitted = 0;

					if (eastq.usage.current_value > 0)
						{
						wait until (east_canal_contents + west_canal_contents == 0
							    and not lock_busy);
						break;
						}
					}

				wait until (eastq.usage.current_value > 0
					or  westq.usage.current_value > 0);

				}	// end forever

			};	// end of lock_manager actions

		}   // end of lock_manager

	 class eastbound_barge
		{
		actions
			{
			enqueue eastq;
			wait until (eastbound_permitted > 0);
			eastbound_permitted -= 1;
			west_canal_contents += 1;

			if (west_canal_contents == 1 and not lock_busy and lock_level != high)
				fork
					{
					advance 12.0;	// raise the water
					lock_level = high;
					terminate;
					}

			advance 14.0;			// travel through the west canal

			wait until (not lock_busy);
			lock_busy = TRUE;
			west_canal_contents -= 1;

			wait until (lock_level == high);

			advance 5.0;			// enter the lock
			advance 12.0;			// lower the barge
			lock_level = low;
			advance 5.0;			// exit the lock

			if (west_canal_contents > 0)	// followers; lock_level = low
				fork
					{
					advance 12.0;		// raise the water
					lock_level = high;
					terminate;
					}

			lock_busy = FALSE;		// allow another barge to enter

			east_canal_contents += 1;
			advance 18.0;				// travel through the east canal

			depart eastq;
			tabulate transit_time = time - ACTIVE -> mark_time;

			east_canal_contents -= 1;
			terminate;
			}
		}	    // end eastbound_barge

	 class westbound_barge
		{
		actions
			{
			enqueue westq;
			wait until (westbound_permitted > 0);
			westbound_permitted -= 1;
			east_canal_contents += 1;

			if (east_canal_contents == 1 and not lock_busy and lock_level != low)
				fork
					{
					advance 12.0;	// lower the water
					lock_level = low;
					terminate;
					}

			advance 14.0;			// travel through the east canal

			wait until (not lock_busy);
			lock_busy = TRUE;
			east_canal_contents -= 1;

			wait until (lock_level == low);

			advance 5.0;			// enter the lock
			advance 12.0;			// raise the barge
			lock_level = high;
			advance 5.0;			// exit the lock

			if (east_canal_contents > 0)	// followers; lock_level = high
				fork
					{
					advance 12.0;		// lower the water
					lock_level = low;
					terminate;
					}

			lock_busy = FALSE;		// allow another barge to enter

			west_canal_contents += 1;
			advance 18.0;				// travel through the west canal

			depart westq;
			tabulate transit_time = time - ACTIVE -> mark_time;

			west_canal_contents -= 1;
			terminate;
			}
		}	    // end westbound_barge

	 procedure main()
		{
		double	mean1[100], mean2[100], mean3[100],
			mean4[50],  mean5[50],	mean6[50],
			anti1[50],  anti2[50],	anti3[50],
			comn1[50],  comn2[50],	comn3[50];

		int	i;

		rn_seed east = 1000000, west = 2000000;

		run_model(5, 5, NREPS, mean1);
		report_mean_ci("\nExperiment 1", 0.90, mean1, 100);

		rn_seed east = 3000000, west = 4000000;

		run_model(5, 5, NREPS, mean2);
		report_mean_ci("\nExperiment 2", 0.90, mean2, 100);

		rn_seed east = 5000000, west = 6000000;

		run_model(5, 5, NREPS, mean3);
		report_mean_ci("\nExperiment 3", 0.90, mean3, 100);

		rn_seed east = 1000000 antithetic,
			west = 2000000 antithetic;

		run_model(5, 5, NREPS/2, anti1);

		report_antithetic_mean_ci("\nAntithetic 1", 0.90,
			mean1, anti1, 50);

		rn_seed east = 3000000 antithetic,
			west = 4000000 antithetic;

		run_model(5, 5, NREPS/2, anti2);

		report_antithetic_mean_ci("\nAntithetic 2", 0.90,
			mean2, anti2, 50);

		rn_seed east = 5000000 antithetic,
			west = 6000000 antithetic;

		run_model(5, 5, NREPS/2, anti3);

		report_antithetic_mean_ci("\nAntithetic 3", 0.90,
			mean3, anti3, 50);

		rn_seed east = 7000000, west = 8000000;

		run_model(6, 6, NREPS/2, mean4);

		report_common_mean_ci("\nDifference 1", 0.90,
			mean1, mean4, 50);

		rn_seed east = 9000000, west = 10000000;

		run_model(6, 6, NREPS/2, mean5);

		report_common_mean_ci("\nDifference 2", 0.90,
			mean2, mean5, 50);

		rn_seed east = 11000000, west = 12000000;

		run_model(6, 6, NREPS/2, mean6);

		report_common_mean_ci("\nDifference 3", 0.90,
			mean3, mean6, 50);

		rn_seed east = 1000000, west = 2000000;

		run_model(6, 6, NREPS/2, comn1);

		report_common_mean_ci("\nCommon 1", 0.90,
			mean1, comn1, 50);

		rn_seed east = 3000000, west = 4000000;

		run_model(6, 6, NREPS/2, comn2);

		report_common_mean_ci("\nCommon 2", 0.90,
			mean2, comn2, 50);

		rn_seed east = 5000000, west = 6000000;

		run_model(6, 6, NREPS/2, comn3);

		report_common_mean_ci("\nCommon 3", 0.90,
			mean3, comn3, 50);

		for (i = 1; i <= 100; i++)
			tabulate normality = mean1[i];

		report normality;

		exit(0);
		}

	 procedure run_model(
		int experimental_eastmax,
		int experimental_westmax,
		int replications,
		out double sample_means[*])

		{
		int	i, dayno;

		for (i = 1; i <= replications; i++)
			{
			eastmax = experimental_eastmax;
			westmax = experimental_westmax;

			activate new lock_manager;

			fork
				{
				advance rv_uniform(east, 0.0, 30.0);
				activate new eastbound_barge;		// first eastbound

				forever
					{
					advance rv_expo(east, 75.0);
					activate new eastbound_barge;
					}
				}
			fork
				{
				advance rv_uniform(west, 0.0, 20.0);
				activate new westbound_barge;		// first westbound

				forever
					{
					advance rv_expo(west, 75.0);
					activate new westbound_barge;
					}
				}

			advance 14400.0;	// run length

			sample_means[i] = sample_mean(transit_time);

			// clear configuration for next run

			lock_level = NONE;
			lock_busy = FALSE;
			east_canal_contents = 0;
			west_canal_contents = 0;
			eastbound_permitted = 0;
			westbound_permitted = 0;

			clear system;		// SLX clear
			}

		return;
		}

	}	// end module Schriber_Canal_and_Lock