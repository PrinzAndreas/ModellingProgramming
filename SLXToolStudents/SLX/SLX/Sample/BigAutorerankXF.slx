//*****************************************************************************
//	Big Autorerank Test - Set(Interface)
//*****************************************************************************

#define SLX2	ON

module BigAutoRerank
	{
#safeifdef STUDENT_SLX
	constant int	NSAMP = 440;
#else
	constant int	NSAMP = 1000000;
#endif
	
	rn_stream	Samples;
	
	interface	xf
		{
		abstract control int		i;
		abstract control double	x;
		};

	class widget implements(xf)
		{
		concrete control double	x;
		concrete control int		i;
		};
	
	set(xf) ranked(autorerank descending i, autorerank ascending x)	wset;
	
	procedure main()
		{
		int					i;
		pointer(widget)	w, ww[NSAMP];		

		for (i = 1; i <= NSAMP; i++)
			{
			w = new widget;
			ww[i] = w;
			
			w -> i = rv_discrete_uniform(Samples, 1, NSAMP);
			w -> x = rv_uniform(Samples, 0, 1.0);
			
			place w into wset;
			}

		test_wset();
		
		//	Torture test: change all rerankable attributes

		for (i = 1; i <= NSAMP; i++)
			{
			w = ww[i];

			w -> i = rv_discrete_uniform(Samples, 1, NSAMP);
			w -> x = rv_uniform(Samples, 0, 1.0);
			}
		
		test_wset();
		exit(0);
		}

	procedure test_wset()
		{
		pointer(widget)	w;
		
		int			j, previ;
		double	prevx;
		
		previ = INT_MAX;
		prevx = -INFINITY;
		
		w = first widget in wset;
		print(w, w -> i, w -> x)				"\nFirst Member: _  i = _  x = _._____\n";
		
		w = last widget in wset;
		print(w, w -> i, w -> x)				"\nLast Member: _  i = _  x = _._____\n\n";
		
		j = 1;
		for (w = each widget in wset)
			{
			if (w -> i > previ)
				print(j, w -> i, previ)		"Member _ is out-of-order:  i = _, previous i = _\n";
			else
				if (w -> i == previ)
					if (w -> x < prevx)
						print(j, w -> i, previ, w -> x, prevx)		"Member _ is out-of-order:  i = _, previous i = _  x = _._____, previous x = _._____\n";
			
			previ = w -> i;
			prevx = w -> x;
			++j;
			}
		
		return;
		}
	}