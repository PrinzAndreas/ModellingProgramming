//*****************************************************************************
//      Module SetMembershipTests
//*****************************************************************************

module SetMembershiptests
	{
	class widget
		{
		int	i;
		};

	set(widget)		ws1, ws2, ws3;

	procedure main()
		{
		pointer(widget)		w1 = new widget;
		pointer(widget)		w2 = new widget;
		pointer(widget)		w3 = new widget;

		place w1 into ws1;
		place w2 into ws1;
		place w2 into ws2;
		place w2 into ws3;
		place w3 into ws2;
		place w3 into ws3;

		test_contains(ws1, w1, TRUE);
		test_contains(ws1, w2, TRUE);
		test_contains(ws1, w3, FALSE);

		test_contains(ws2, w1, FALSE);
		test_contains(ws2, w2, TRUE);
		test_contains(ws2, w3, TRUE);

		test_contains(ws3, w1, FALSE);
		test_contains(ws3, w2, TRUE);
		test_contains(ws3, w3, TRUE);

		test_is_in(ws1, w1, TRUE);
		test_is_in(ws1, w2, TRUE);
		test_is_in(ws1, w3, FALSE);

		test_is_in(ws2, w1, FALSE);
		test_is_in(ws2, w2, TRUE);
		test_is_in(ws2, w3, TRUE);

		test_is_in(ws3, w1, FALSE);
		test_is_in(ws3, w2, TRUE);
		test_is_in(ws3, w3, TRUE);

		test_is_not_in(ws3, w1, TRUE);
		test_is_not_in(ws3, w2, FALSE);
		test_is_not_in(ws3, w3, FALSE);

		// test error conditions
		
/*		UNCOMMENT TO TEST

//		test_contains(ws1, NULL, FALSE);		// fatal!
		test_contains(ws1, w1, FALSE);
		test_contains(ws1, w3, TRUE);

		test_is_in(ws1, w1, FALSE);
		test_is_in(ws1, w3, TRUE);

		test_is_not_in(ws1, w1, TRUE);
		test_is_not_in(ws1, w3, FALSE);
*/
		exit(0);
		}

	procedure test_contains(set(widget) s, pointer(*) obj, boolean should_be_true)
		{
		if (s contains obj)
			{
			if (should_be_true)
				return;
			}
		else
			if (! should_be_true)
				return;

		diagnose s, obj		run_time warning (s contains obj)	"set ^ contains ^ is _";
		return;
		}

	procedure test_is_in(set(widget) s, pointer(*) obj, boolean should_be_true)
		{
		if (obj is_in s)
			{
			if (should_be_true)
				return;
			}
		else
			if (! should_be_true)
				return;

		diagnose obj, s		run_time warning ("is_in", obj is_in s)		"^ _ set ^ is _";
		return;
		}

	procedure test_is_not_in(set(widget) s, pointer(*) obj, boolean should_be_true)
		{
		pointer(*)		op;
		
		boolean		test_is_in, test_is_not_in;
		
//		test_is_in = op is_in s;

		test_is_in		= obj is_in s;
		test_is_not_in	= obj is_not_in s;
		
		if (!(obj is_in s))
			test_is_in = FALSE;
			
		if (!(obj is_not_in s))
			test_is_in = FALSE;
			
		if (obj is_in s || obj is_not_in s)
			test_is_in = FALSE;
			
		if (!(obj is_in s || obj is_not_in s))
			test_is_in = FALSE;
			
		if (!(obj is_in s && obj is_not_in s))
			test_is_in = TRUE;
			
		if (obj is_not_in s)
			{
			if (should_be_true)
				return;
			}
		else
			if (! should_be_true)
				return;

		diagnose obj, s		run_time warning ("is_not_in", obj is_not_in s)		"^ _ set ^ is _";
		return;
		}
	}