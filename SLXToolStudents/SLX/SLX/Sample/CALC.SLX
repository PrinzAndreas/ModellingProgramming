import <stats.slx>

module sample_calculator	// illustrates input parsing
	{
	filedef 	keyboard	name = "stdin";    // read from the keyboard
	filedef 	screen	name = "stderr";

	string(256)	inbuf;		// input buffer
	int			inbuf_limit;

	typedef enum { number, plus, minus, multiply, divide, left_paren, right_paren, eol }	char_type;

	procedure main()
		{
		float	result;
		int	i;

		open keyboard input;
		forever
			{
			read record end=done file=keyboard prompt="Please enter an expression"	(inbuf);
 			inbuf_limit = length(inbuf);

			i = 1;
			if (xpr(result, i) and i > inbuf_limit)
				{
				write file=screen (result)  "_._______\n";
				continue;
				}
			write file=screen		    "Invalid expression!\n";
			}

done:	exit(0);
		}

	procedure xpr(inout float result, inout int iptr) returning boolean
		{
		float	lhs, rhs, dummy;
		int	len;

		if (term(lhs, iptr) == FALSE)
			return FALSE;

		forever
		    switch (get_token(dummy, iptr, len))
			{
default:	return FALSE;

case eol:
case right_paren:	

			result = lhs;
			return TRUE;

case plus:

			++iptr;
			if (term(rhs, iptr) == FALSE)
				return FALSE;

			lhs += rhs;
			continue;

case minus:

			++iptr;
			if (term(rhs, iptr) == FALSE)
				return FALSE;

			lhs -= rhs;
			continue;
			}

		}	// end of xpr(result, iptr)

	procedure term(inout float result, inout int iptr) returning boolean
		{
		float	lhs, rhs, dummy;
		int	len;

		if (primary(lhs, iptr) == FALSE)
			return FALSE;

		forever
		    switch (get_token(dummy, iptr, len))
			{
default:	result = lhs;
			return TRUE;

case multiply:

			++iptr;
			if (primary(rhs, iptr) == FALSE)
				return FALSE;

			lhs *= rhs;
			continue;

case divide:
	
			++iptr;
			if (primary(rhs, iptr) == FALSE)
				return FALSE;

			if (rhs == 0.0)
				{
				write file=screen   "Division by zero!\n";
				return FALSE;
				}

			lhs /= rhs;
			continue;
			}

		}	// end of term(result, iptr)

	procedure primary(inout float result, inout int iptr) returning boolean
		{
		float	dummy;
		int	len;

		switch (get_token(result, iptr, len))
			{
default:	return FALSE;

case number:
	
			iptr += len;
			return TRUE;

case left_paren:
			
			++iptr;
			if (xpr(result, iptr) == FALSE)
				return FALSE;

			if (get_token(dummy, iptr, len) != right_paren)
				{
				write file=screen "missing \")\"\n";
				return FALSE;
				}

			++iptr;
			return TRUE;
			}
		}

	procedure get_token(inout float result,
			    inout int	iptr,
			    inout int	len)	returning char_type
		{
		int		scan;
		string(1)	this_char;

		if (iptr > inbuf_limit)
			return eol;

		this_char = substring(inbuf, iptr, 1);
		forever
			{
			if (this_char != " ")
				break;
			++iptr;

			if (iptr > inbuf_limit)
				return eol;

			this_char = substring(inbuf, iptr, 1);
			}

		for (scan = iptr; scan <= inbuf_limit; scan++)
			{
			this_char = substring(inbuf,scan,1);

			if (this_char >= "0" and this_char <= "9")
				continue;

			if (this_char == ".")
				continue;

			if (this_char == "e" or this_char == "E")
				{
				++scan;
				if (scan > inbuf_limit)
					return NONE;

				this_char = substring(inbuf,scan,1);
				if (this_char == "+"
				 or this_char == "-"
				 or this_char >= "0" and this_char <= "9")
					continue;
				else
					return NONE;
				}
			break;
			}

		len = scan - iptr;
		if (len > 0)		// we have a number
			{
			read string=substring(inbuf,iptr,len) err=bad_number (result);
			return number;

bad_number:
	
			write file=screen   "Invalid number!\n";
			return NONE;
			}

		switch (this_char)
			{
default:	return NONE;

case "+":	len = 1;
			return plus;

case "-":	len = 1;
			return minus;

case "*":	len = 1;
			return multiply;

case "/":	len = 1;
			return divide;

case "(":	len = 1;
			return left_paren;

case ")":	len = 1;
			return right_paren;
			}

		}	// end of (get_token(float result, int iptr, int len) returning char_type
	}