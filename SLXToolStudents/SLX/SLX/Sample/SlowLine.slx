//*****************************************************************************
//	SlowLine Bank Simulation
//	Incoming customers select the shortest line and stick with it.
//*****************************************************************************

import 	<stats.slx>		// Statistics
import	<h7.slx>			// GPSS/H (queueing constructs)

#safesymbol	INTERACTIVE
//efine				INTERACTIVE	ON

module SlowLine
	{
	//	Global Variables
	
	double						MeanServiceTime;

	int								NumberOfTellers,
									NumberOfCustomers,
									BusyTellers;
			
	control int					NumberOut;
	
	random_variable			TimeInQueue,
									TimeInSystem;
	
	random_variable	(time)	TellerUtil;
	
	rn_stream					IAT, Service;							// random number streams
	
	//	Classes and sets
	
	class Teller
		{
		facility			Server;
		queue				Queue;
		};
		
	set(Teller)			TellerPool;
	
	class Customer
		{
		double			ArrivalTime;
		int					shortest;

		pointer(Teller)	t, MyTeller;
		
		actions
			{
			ArrivalTime = time;
			
			shortest = 999;
			for (t = each Teller in TellerPool)
				{
				if (FNU(t -> Server))					// if not in use
					{
					MyTeller = t;					// shortest queue = 0
					break;	
					}
				
				if (Q(t -> Queue) < shortest)
					{
					MyTeller = t;
					shortest = Q(t -> Queue);
					}
				}
			
			enqueue	MyTeller -> Queue;				// join queue
			seize		MyTeller -> Server;				// acquire single server
			depart	MyTeller -> Queue;				// exit queue
			
			++BusyTellers;
			tabulate TellerUtil			= (double) BusyTellers / NumberOfTellers;
			tabulate TimeInQueue		= time - ArrivalTime;
			
			advance	rv_expo(Service, MeanServiceTime);
			
			release	MyTeller -> Server;				// Free the teller
			
			--BusyTellers;
			tabulate TellerUtil			= (double) BusyTellers / NumberOfTellers;
			tabulate TimeInSystem	= time - ArrivalTime;
						
			++NumberOut;

			remove MyTeller from TellerPool;
			place MyTeller into TellerPool LIFO;		// rotate tellers to even out utilization
			
			terminate;									// exit the bank
			}
		};
	
	procedure main()
		{
		double	ArrivalRate, ServiceRate, MeanIAT;
		
		int		i;
		
#ifdef INTERACTIVE
		read file=stdin prompt = "Please enter the total number of customers to be processed" end = done (NumberOfCustomers);
		
		read file=stdin prompt = "Please enter the mean number of customers per minute" end=done (ArrivalRate);
		
		read file=stdin prompt = "Please enter the number of Tellers" end = done (NumberOfTellers);
		
		read file=stdin prompt = "Please enter the mean customer service time (minutes)" end = done (MeanServiceTime);
#else
		filedef infile input name = "quickline.dat";
		
		read file=infile end=done (NumberOfCustomers, ArrivalRate, NumberOfTellers, MeanServiceTime);
#endif		
		if (NumberOfTellers <= 0)
			{
			print options=red,bold "The number of tellers must be greater than zero.\n";
			exit(0);
			}
		
		if (ArrivalRate <= 0)
			{
			print options=red,bold  "The mean number of customers per minute must be greater than zero.\n";
			exit(0);
			}
		
		ServiceRate	= NumberOfTellers / MeanServiceTime;
		MeanIAT		= 1.0 / ArrivalRate;
		
		if (ServiceRate < ArrivalRate)
			{
			print options=red,bold (ArrivalRate, ServiceRate)
			
				"Arrival rate (_.__ per minute) exceeds service capacity (_.__ per minute).\n";
			
			exit (0);
			}
			
		for (i = 1; i <= NumberOfTellers; i++)
			place new Teller into TellerPool;
			
		for (i = 1; i <= NumberOfCustomers; i++)
			{
			advance rv_expo(IAT, MeanIAT);		// interarrival time
			
			activate new Customer;
			}			
	
		print options=bold	"SlowLine Results...\n\n";
		
		print (NumberOfCustomers - NumberOut)		"In system at shutdown: _\n\n";
		
		wait until (NumberOut == NumberOfCustomers);		// drain the system;
		
		report TimeInQueue, TimeInSystem, TellerUtil;
		
		print options=bold,red (100.00 * ArrivalRate / ServiceRate)		"\nExpected Teller Utilization = ___._%\n";
		
		print options=bold "\nStandard Statistics";
		
		report system;
		
done:	exit(0);
		}
	}